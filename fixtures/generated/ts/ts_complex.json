{
	"sample": {
		"lang": "ts",
		"variant": "complex",
		"content": "const a = 1;\n\nconst b = 'b';\n\nconst c = true;\n\nexport type Some_Type = 1 | 'b' | true;\n\nclass D {\n\td1: string = 'd';\n\td2: number;\n\td3 = $state(false);\n\n\tconstructor(d2: number) {\n\t\tthis.d2 = d2;\n\t}\n\n\tclass_method(): string {\n\t\treturn `Hello, ${this.d1}`;\n\t}\n\n\tinstance_method = (): void => {\n\t\t/* ... */\n\t\tthis.#private_method();\n\t\t// foo\n\t};\n\n\t#private_method() {\n\t\tthrow new Error(`${this.d1} \n\t\t\tmultiline\n\t\t\tetc\n\t\t`);\n\t}\n\n\tprotected protected_method(): void {\n\t\tconsole.log(new Date()); // eslint-disable-line no-console\n\t}\n}\n\nexport {a, b, c, D};\n\n// comment\n\n/*\nother comment\n\nconst comment = false;\n*/\n\n/**\n * JSDoc comment\n */\n\nexport interface Some_E {\n\tname: string;\n\tage: number;\n}\n\nexport const some_e: Some_E = {name: 'A. H.', age: 100};\n\nexport function add(x: number, y: number): number {\n\treturn x + y;\n}\n\nexport const plus = (a: any, b: any): any => a + b;\n\n// boundary test cases\nexport const str_with_keywords = 'const class function string';\nexport const str_with_comment = '// this is not a comment';\nexport const template_with_expr = `Value: ${1 + 2} and ${true}`;\n\n// regex that looks like comment\nexport const regex = /\\/\\/.*/g;\nexport const complex_regex = /^(?:\\/\\*.*?\\*\\/|\\/\\/.*|[^\\/])+$/;\n\n// string in comment should not be highlighted as string\n// const commented = \"this string is in a comment\";\n",
		"filepath": "src/lib/samples/sample_complex.ts"
	},
	"boundaries": [{"language": "ts", "type": "code", "start": 0, "end": 1327}],
	"domstyler_html": "<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class_name\">Some_Type</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class_name\"><span class=\"token constant\">D</span></span> <span class=\"token punctuation\">{</span>\n\td1<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">;</span>\n\td2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\td3 <span class=\"token operator\">=</span> <span class=\"token function\">$state</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>d2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d2 <span class=\"token operator\">=</span> d2<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">class_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token template_string\"><span class=\"token template_punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d1<span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token template_punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tinstance_method <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">/* ... */</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">#private_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// foo</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">#private_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class_name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template_string\"><span class=\"token template_punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d1<span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token string\"> \n\t\t\tmultiline\n\t\t\tetc\n\t\t</span><span class=\"token template_punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">protected</span> <span class=\"token function\">protected_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class_name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// eslint-disable-line no-console</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// comment</span>\n\n<span class=\"token comment\">/*\nother comment\n\nconst comment = false;\n*/</span>\n\n<span class=\"token comment\">/**\n * JSDoc comment\n */</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class_name\">Some_E</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\tage<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> some_e<span class=\"token operator\">:</span> Some_E <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'A. H.'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> plus <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// boundary test cases</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> str_with_keywords <span class=\"token operator\">=</span> <span class=\"token string\">'const class function string'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> str_with_comment <span class=\"token operator\">=</span> <span class=\"token string\">'// this is not a comment'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> template_with_expr <span class=\"token operator\">=</span> <span class=\"token template_string\"><span class=\"token template_punctuation string\">`</span><span class=\"token string\">Value: </span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token string\"> and </span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span><span class=\"token boolean\">true</span><span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token template_punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// regex that looks like comment</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex_delimiter\">/</span><span class=\"token regex_source lang_regex\">\\/\\/.*</span><span class=\"token regex_delimiter\">/</span><span class=\"token regex_flags\">g</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> complex_regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex_delimiter\">/</span><span class=\"token regex_source lang_regex\">^(?:\\/\\*.*?\\*\\/|\\/\\/.*|[^\\/])+$</span><span class=\"token regex_delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// string in comment should not be highlighted as string</span>\n<span class=\"token comment\">// const commented = \"this string is in a comment\";</span>\n",
	"boundary_scanner_html": "<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token string\">&#039;b&#039;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class_name\">Some_Type</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token string\">&#039;b&#039;</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class_name\">D</span> <span class=\"token punctuation\">{</span>\n\td1<span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">&#039;d&#039;</span><span class=\"token punctuation\">;</span>\n\td2<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n\td3 <span class=\"token operator\">=</span> $<span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>d2<span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d2 <span class=\"token operator\">=</span> d2<span class=\"token punctuation\">;</span>\n\t}\n\n\t<span class=\"token function\">class_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">`Hello, </span>$<span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d1}<span class=\"token string\">`;\n\t}\n\n\tinstance_method = (): void =&gt; {\n\t\t/* ... */\n\t\tthis.#private_method();\n\t\t// foo\n\t};\n\n\t#private_method() {\n\t\tthrow new Error(`</span>$<span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d1} \n\t\t\tmultiline\n\t\t\tetc\n\t\t<span class=\"token string\">`);\n\t}\n\n\tprotected protected_method(): void {\n\t\tconsole.log(new Date()); // eslint-disable-line no-console\n\t}\n}\n\nexport {a, b, c, D};\n\n// comment\n\n/*\nother comment\n\nconst comment = false;\n*/\n\n/**\n * JSDoc comment\n */\n\nexport interface Some_E {\n\tname: string;\n\tage: number;\n}\n\nexport const some_e: Some_E = {name: &#039;A. H.&#039;, age: 100};\n\nexport function add(x: number, y: number): number {\n\treturn x + y;\n}\n\nexport const plus = (a: any, b: any): any =&gt; a + b;\n\n// boundary test cases\nexport const str_with_keywords = &#039;const class function string&#039;;\nexport const str_with_comment = &#039;// this is not a comment&#039;;\nexport const template_with_expr = `</span><span class=\"token class_name\">Value</span><span class=\"token operator\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span>} and $<span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span>}<span class=\"token string\">`;\n\n// regex that looks like comment\nexport const regex = /\\/\\/.*/g;\nexport const complex_regex = /^(?:\\/\\*.*?\\*\\/|\\/\\/.*|[^\\/])+$/;\n\n// string in comment should not be highlighted as string\n// const commented = &quot;this string is in a comment&quot;;\n</span>"
}
