{
	"sample": {
		"lang": "ts",
		"variant": "complex",
		"content": "const a = 1;\n\nconst b = 'b';\n\nconst c = true;\n\nexport type Some_Type = 1 | 'b' | true;\n\nclass D {\n\td1: string = 'd';\n\td2: number;\n\td3 = $state(false);\n\n\tconstructor(d2: number) {\n\t\tthis.d2 = d2;\n\t}\n\n\tclass_method(): string {\n\t\treturn `Hello, ${this.d1}`;\n\t}\n\n\tinstance_method = (): void => {\n\t\t/* ... */\n\t\tthis.#private_method();\n\t\t// foo\n\t};\n\n\t#private_method() {\n\t\tthrow new Error(`${this.d1} \n\t\t\tmultiline\n\t\t\tetc\n\t\t`);\n\t}\n\n\tprotected protected_method(): void {\n\t\tconsole.log(new Date()); // eslint-disable-line no-console\n\t}\n}\n\nexport {a, b, c, D};\n\n// comment\n\n/*\nother comment\n\nconst comment = false;\n*/\n\n/**\n * JSDoc comment\n */\n\nexport interface Some_E {\n\tname: string;\n\tage: number;\n}\n\nexport const some_e: Some_E = {name: 'A. H.', age: 100};\n\nexport function add(x: number, y: number): number {\n\treturn x + y;\n}\n\nexport const plus = (a: any, b: any): any => a + b;\n\n// boundary test cases\nexport const str_with_keywords = 'const class function string';\nexport const str_with_comment = '// this is not a comment';\nexport const template_with_expr = `Value: ${1 + 2} and ${true}`;\n\n// regex that looks like comment\nexport const regex = /\\/\\/.*/g;\nexport const complex_regex = /^(?:\\/\\*.*?\\*\\/|\\/\\/.*|[^\\/])+$/;\n\n// string in comment should not be highlighted as string\n// const commented = \"this string is in a comment\";\n",
		"filepath": "src/lib/samples/sample_complex.ts"
	},
	"tokens": [
		{"type": "keyword", "start": 0, "end": 5},
		{"type": "operator", "start": 8, "end": 9},
		{"type": "number", "start": 10, "end": 11},
		{"type": "punctuation", "start": 11, "end": 12},
		{"type": "keyword", "start": 14, "end": 19},
		{"type": "operator", "start": 22, "end": 23},
		{"type": "string", "start": 24, "end": 27},
		{"type": "punctuation", "start": 27, "end": 28},
		{"type": "keyword", "start": 30, "end": 35},
		{"type": "operator", "start": 38, "end": 39},
		{"type": "boolean", "start": 40, "end": 44},
		{"type": "punctuation", "start": 44, "end": 45},
		{"type": "keyword", "start": 47, "end": 53},
		{"type": "keyword", "start": 54, "end": 58},
		{"type": "class_name", "start": 59, "end": 68},
		{"type": "operator", "start": 69, "end": 70},
		{"type": "number", "start": 71, "end": 72},
		{"type": "operator", "start": 73, "end": 74},
		{"type": "string", "start": 75, "end": 78},
		{"type": "operator", "start": 79, "end": 80},
		{"type": "boolean", "start": 81, "end": 85},
		{"type": "punctuation", "start": 85, "end": 86},
		{"type": "keyword", "start": 88, "end": 93},
		{"type": "class_name", "start": 94, "end": 95},
		{"type": "constant", "start": 94, "end": 95},
		{"type": "punctuation", "start": 96, "end": 97},
		{"type": "operator", "start": 101, "end": 102},
		{"type": "builtin", "start": 103, "end": 109},
		{"type": "operator", "start": 110, "end": 111},
		{"type": "string", "start": 112, "end": 115},
		{"type": "punctuation", "start": 115, "end": 116},
		{"type": "operator", "start": 120, "end": 121},
		{"type": "builtin", "start": 122, "end": 128},
		{"type": "punctuation", "start": 128, "end": 129},
		{"type": "operator", "start": 134, "end": 135},
		{"type": "function", "start": 136, "end": 142},
		{"type": "punctuation", "start": 142, "end": 143},
		{"type": "boolean", "start": 143, "end": 148},
		{"type": "punctuation", "start": 148, "end": 149},
		{"type": "punctuation", "start": 149, "end": 150},
		{"type": "function", "start": 153, "end": 164},
		{"type": "punctuation", "start": 164, "end": 165},
		{"type": "operator", "start": 167, "end": 168},
		{"type": "builtin", "start": 169, "end": 175},
		{"type": "punctuation", "start": 175, "end": 176},
		{"type": "punctuation", "start": 177, "end": 178},
		{"type": "keyword", "start": 181, "end": 185},
		{"type": "punctuation", "start": 185, "end": 186},
		{"type": "operator", "start": 189, "end": 190},
		{"type": "punctuation", "start": 193, "end": 194},
		{"type": "punctuation", "start": 196, "end": 197},
		{"type": "function", "start": 200, "end": 212},
		{"type": "punctuation", "start": 212, "end": 213},
		{"type": "punctuation", "start": 213, "end": 214},
		{"type": "operator", "start": 214, "end": 215},
		{"type": "builtin", "start": 216, "end": 222},
		{"type": "punctuation", "start": 223, "end": 224},
		{"type": "keyword", "start": 227, "end": 233},
		{"type": "template_string", "start": 234, "end": 253},
		{"type": "template_punctuation", "start": 234, "end": 235},
		{"type": "string", "start": 235, "end": 242},
		{"type": "interpolation", "start": 242, "end": 252},
		{"type": "interpolation_punctuation", "start": 242, "end": 244},
		{"type": "keyword", "start": 244, "end": 248},
		{"type": "punctuation", "start": 248, "end": 249},
		{"type": "interpolation_punctuation", "start": 251, "end": 252},
		{"type": "template_punctuation", "start": 252, "end": 253},
		{"type": "punctuation", "start": 253, "end": 254},
		{"type": "punctuation", "start": 256, "end": 257},
		{"type": "operator", "start": 276, "end": 277},
		{"type": "punctuation", "start": 278, "end": 279},
		{"type": "punctuation", "start": 279, "end": 280},
		{"type": "operator", "start": 280, "end": 281},
		{"type": "keyword", "start": 282, "end": 286},
		{"type": "operator", "start": 287, "end": 289},
		{"type": "punctuation", "start": 290, "end": 291},
		{"type": "comment", "start": 294, "end": 303},
		{"type": "keyword", "start": 306, "end": 310},
		{"type": "punctuation", "start": 310, "end": 311},
		{"type": "function", "start": 311, "end": 326},
		{"type": "punctuation", "start": 326, "end": 327},
		{"type": "punctuation", "start": 327, "end": 328},
		{"type": "punctuation", "start": 328, "end": 329},
		{"type": "comment", "start": 332, "end": 338},
		{"type": "punctuation", "start": 340, "end": 341},
		{"type": "punctuation", "start": 341, "end": 342},
		{"type": "function", "start": 345, "end": 360},
		{"type": "punctuation", "start": 360, "end": 361},
		{"type": "punctuation", "start": 361, "end": 362},
		{"type": "punctuation", "start": 363, "end": 364},
		{"type": "keyword", "start": 367, "end": 372},
		{"type": "keyword", "start": 373, "end": 376},
		{"type": "class_name", "start": 377, "end": 382},
		{"type": "punctuation", "start": 382, "end": 383},
		{"type": "template_string", "start": 383, "end": 419},
		{"type": "template_punctuation", "start": 383, "end": 384},
		{"type": "interpolation", "start": 384, "end": 394},
		{"type": "interpolation_punctuation", "start": 384, "end": 386},
		{"type": "keyword", "start": 386, "end": 390},
		{"type": "punctuation", "start": 390, "end": 391},
		{"type": "interpolation_punctuation", "start": 393, "end": 394},
		{"type": "string", "start": 394, "end": 418},
		{"type": "template_punctuation", "start": 418, "end": 419},
		{"type": "punctuation", "start": 419, "end": 420},
		{"type": "punctuation", "start": 420, "end": 421},
		{"type": "punctuation", "start": 423, "end": 424},
		{"type": "keyword", "start": 427, "end": 436},
		{"type": "function", "start": 437, "end": 453},
		{"type": "punctuation", "start": 453, "end": 454},
		{"type": "punctuation", "start": 454, "end": 455},
		{"type": "operator", "start": 455, "end": 456},
		{"type": "keyword", "start": 457, "end": 461},
		{"type": "punctuation", "start": 462, "end": 463},
		{"type": "builtin", "start": 466, "end": 473},
		{"type": "punctuation", "start": 473, "end": 474},
		{"type": "function", "start": 474, "end": 477},
		{"type": "punctuation", "start": 477, "end": 478},
		{"type": "keyword", "start": 478, "end": 481},
		{"type": "class_name", "start": 482, "end": 486},
		{"type": "punctuation", "start": 486, "end": 487},
		{"type": "punctuation", "start": 487, "end": 488},
		{"type": "punctuation", "start": 488, "end": 489},
		{"type": "punctuation", "start": 489, "end": 490},
		{"type": "comment", "start": 491, "end": 524},
		{"type": "punctuation", "start": 526, "end": 527},
		{"type": "punctuation", "start": 528, "end": 529},
		{"type": "keyword", "start": 531, "end": 537},
		{"type": "punctuation", "start": 538, "end": 539},
		{"type": "punctuation", "start": 540, "end": 541},
		{"type": "punctuation", "start": 543, "end": 544},
		{"type": "punctuation", "start": 546, "end": 547},
		{"type": "constant", "start": 548, "end": 549},
		{"type": "punctuation", "start": 549, "end": 550},
		{"type": "punctuation", "start": 550, "end": 551},
		{"type": "comment", "start": 553, "end": 563},
		{"type": "comment", "start": 565, "end": 608},
		{"type": "comment", "start": 610, "end": 634},
		{"type": "keyword", "start": 636, "end": 642},
		{"type": "keyword", "start": 643, "end": 652},
		{"type": "class_name", "start": 653, "end": 659},
		{"type": "punctuation", "start": 660, "end": 661},
		{"type": "operator", "start": 667, "end": 668},
		{"type": "builtin", "start": 669, "end": 675},
		{"type": "punctuation", "start": 675, "end": 676},
		{"type": "operator", "start": 681, "end": 682},
		{"type": "builtin", "start": 683, "end": 689},
		{"type": "punctuation", "start": 689, "end": 690},
		{"type": "punctuation", "start": 691, "end": 692},
		{"type": "keyword", "start": 694, "end": 700},
		{"type": "keyword", "start": 701, "end": 706},
		{"type": "operator", "start": 713, "end": 714},
		{"type": "operator", "start": 722, "end": 723},
		{"type": "punctuation", "start": 724, "end": 725},
		{"type": "operator", "start": 729, "end": 730},
		{"type": "string", "start": 731, "end": 738},
		{"type": "punctuation", "start": 738, "end": 739},
		{"type": "operator", "start": 743, "end": 744},
		{"type": "number", "start": 745, "end": 748},
		{"type": "punctuation", "start": 748, "end": 749},
		{"type": "punctuation", "start": 749, "end": 750},
		{"type": "keyword", "start": 752, "end": 758},
		{"type": "keyword", "start": 759, "end": 767},
		{"type": "function", "start": 768, "end": 771},
		{"type": "punctuation", "start": 771, "end": 772},
		{"type": "operator", "start": 773, "end": 774},
		{"type": "builtin", "start": 775, "end": 781},
		{"type": "punctuation", "start": 781, "end": 782},
		{"type": "operator", "start": 784, "end": 785},
		{"type": "builtin", "start": 786, "end": 792},
		{"type": "punctuation", "start": 792, "end": 793},
		{"type": "operator", "start": 793, "end": 794},
		{"type": "builtin", "start": 795, "end": 801},
		{"type": "punctuation", "start": 802, "end": 803},
		{"type": "keyword", "start": 805, "end": 811},
		{"type": "operator", "start": 814, "end": 815},
		{"type": "punctuation", "start": 817, "end": 818},
		{"type": "punctuation", "start": 819, "end": 820},
		{"type": "keyword", "start": 822, "end": 828},
		{"type": "keyword", "start": 829, "end": 834},
		{"type": "operator", "start": 840, "end": 841},
		{"type": "punctuation", "start": 842, "end": 843},
		{"type": "operator", "start": 844, "end": 845},
		{"type": "builtin", "start": 846, "end": 849},
		{"type": "punctuation", "start": 849, "end": 850},
		{"type": "operator", "start": 852, "end": 853},
		{"type": "builtin", "start": 854, "end": 857},
		{"type": "punctuation", "start": 857, "end": 858},
		{"type": "operator", "start": 858, "end": 859},
		{"type": "builtin", "start": 860, "end": 863},
		{"type": "operator", "start": 864, "end": 866},
		{"type": "operator", "start": 869, "end": 870},
		{"type": "punctuation", "start": 872, "end": 873},
		{"type": "comment", "start": 875, "end": 897},
		{"type": "keyword", "start": 898, "end": 904},
		{"type": "keyword", "start": 905, "end": 910},
		{"type": "operator", "start": 929, "end": 930},
		{"type": "string", "start": 931, "end": 960},
		{"type": "punctuation", "start": 960, "end": 961},
		{"type": "keyword", "start": 962, "end": 968},
		{"type": "keyword", "start": 969, "end": 974},
		{"type": "operator", "start": 992, "end": 993},
		{"type": "string", "start": 994, "end": 1020},
		{"type": "punctuation", "start": 1020, "end": 1021},
		{"type": "keyword", "start": 1022, "end": 1028},
		{"type": "keyword", "start": 1029, "end": 1034},
		{"type": "operator", "start": 1054, "end": 1055},
		{"type": "template_string", "start": 1056, "end": 1085},
		{"type": "template_punctuation", "start": 1056, "end": 1057},
		{"type": "string", "start": 1057, "end": 1064},
		{"type": "interpolation", "start": 1064, "end": 1072},
		{"type": "interpolation_punctuation", "start": 1064, "end": 1066},
		{"type": "number", "start": 1066, "end": 1067},
		{"type": "operator", "start": 1068, "end": 1069},
		{"type": "number", "start": 1070, "end": 1071},
		{"type": "interpolation_punctuation", "start": 1071, "end": 1072},
		{"type": "string", "start": 1072, "end": 1077},
		{"type": "interpolation", "start": 1077, "end": 1084},
		{"type": "interpolation_punctuation", "start": 1077, "end": 1079},
		{"type": "boolean", "start": 1079, "end": 1083},
		{"type": "interpolation_punctuation", "start": 1083, "end": 1084},
		{"type": "template_punctuation", "start": 1084, "end": 1085},
		{"type": "punctuation", "start": 1085, "end": 1086},
		{"type": "comment", "start": 1088, "end": 1120},
		{"type": "keyword", "start": 1121, "end": 1127},
		{"type": "keyword", "start": 1128, "end": 1133},
		{"type": "operator", "start": 1140, "end": 1141},
		{"type": "regex", "start": 1142, "end": 1151},
		{"type": "regex_delimiter", "start": 1142, "end": 1143},
		{"type": "regex_source", "start": 1143, "end": 1149},
		{"type": "regex_delimiter", "start": 1149, "end": 1150},
		{"type": "regex_flags", "start": 1150, "end": 1151},
		{"type": "punctuation", "start": 1151, "end": 1152},
		{"type": "keyword", "start": 1153, "end": 1159},
		{"type": "keyword", "start": 1160, "end": 1165},
		{"type": "operator", "start": 1180, "end": 1181},
		{"type": "regex", "start": 1182, "end": 1215},
		{"type": "regex_delimiter", "start": 1182, "end": 1183},
		{"type": "regex_source", "start": 1183, "end": 1214},
		{"type": "regex_delimiter", "start": 1214, "end": 1215},
		{"type": "punctuation", "start": 1215, "end": 1216},
		{"type": "comment", "start": 1218, "end": 1274},
		{"type": "comment", "start": 1275, "end": 1326}
	],
	"domstyler_html": "<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class_name\">Some_Type</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class_name\"><span class=\"token constant\">D</span></span> <span class=\"token punctuation\">{</span>\n\td1<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">;</span>\n\td2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\td3 <span class=\"token operator\">=</span> <span class=\"token function\">$state</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>d2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d2 <span class=\"token operator\">=</span> d2<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">class_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token template_string\"><span class=\"token template_punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d1<span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token template_punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tinstance_method <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">/* ... */</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">#private_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// foo</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">#private_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class_name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template_string\"><span class=\"token template_punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d1<span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token string\"> \n\t\t\tmultiline\n\t\t\tetc\n\t\t</span><span class=\"token template_punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">protected</span> <span class=\"token function\">protected_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class_name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// eslint-disable-line no-console</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// comment</span>\n\n<span class=\"token comment\">/*\nother comment\n\nconst comment = false;\n*/</span>\n\n<span class=\"token comment\">/**\n * JSDoc comment\n */</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class_name\">Some_E</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\tage<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> some_e<span class=\"token operator\">:</span> Some_E <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'A. H.'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> plus <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// boundary test cases</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> str_with_keywords <span class=\"token operator\">=</span> <span class=\"token string\">'const class function string'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> str_with_comment <span class=\"token operator\">=</span> <span class=\"token string\">'// this is not a comment'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> template_with_expr <span class=\"token operator\">=</span> <span class=\"token template_string\"><span class=\"token template_punctuation string\">`</span><span class=\"token string\">Value: </span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token string\"> and </span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span><span class=\"token boolean\">true</span><span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token template_punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// regex that looks like comment</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex_delimiter\">/</span><span class=\"token regex_source lang_regex\">\\/\\/.*</span><span class=\"token regex_delimiter\">/</span><span class=\"token regex_flags\">g</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> complex_regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex_delimiter\">/</span><span class=\"token regex_source lang_regex\">^(?:\\/\\*.*?\\*\\/|\\/\\/.*|[^\\/])+$</span><span class=\"token regex_delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// string in comment should not be highlighted as string</span>\n<span class=\"token comment\">// const commented = \"this string is in a comment\";</span>\n"
}
