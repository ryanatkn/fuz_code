{
	"sample": {
		"lang": "ts",
		"variant": "complex",
		"content": "const a = 1;\n\nconst b = 'b';\n\nconst c = true;\n\nexport type Some_Type = 1 | 'b' | true;\n\ndeclare const class_decorator: any, property_decorator: any, method_decorator: any;\n\nabstract class Base {\n\tabstract abstract_method(): void;\n}\n\n@class_decorator\nclass D extends Base {\n\treadonly d1: string = 'd';\n\td2: number;\n\td3 = $state(null);\n\n\t@property_decorator\n\tdecorated = true;\n\n\tconstructor(d2: number) {\n\t\tsuper();\n\t\tthis.d2 = d2;\n\t}\n\n\tabstract_method(): void {\n\t\t// implementation\n\t}\n\n\t@method_decorator\n\tclass_method(): string {\n\t\treturn `Hello, ${this.d1}`;\n\t}\n\n\tinstance_method = (): void => {\n\t\t/* ... */\n\t\tlet i = 0;\n\t\tdo {\n\t\t\ti++;\n\t\t} while (i < 3);\n\n\t\tfor (const c2 of this.d1) {\n\t\t\tif (c2 === 'd') continue;\n\t\t\tif (!c2) break;\n\t\t\tthis.#private_method(a, c2);\n\t\t}\n\n\t\tswitch (this.d1) {\n\t\t\tcase 'a':\n\t\t\t\tconsole.log('case a');\n\t\t\t\tbreak;\n\t\t\tcase 'b':\n\t\t\tcase 'c':\n\t\t\t\tconsole.log('case b or c');\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log('default');\n\t\t}\n\n\t\tconst obj: {has_d1?: boolean; is_d: boolean} = {\n\t\t\thas_d1: 'd1' in this,\n\t\t\tis_d: this instanceof D,\n\t\t};\n\t\tdelete obj.has_d1;\n\t\t// foo\n\t};\n\n\t#private_method(a2: number, c2: any) {\n\t\tthrow new Error(`${this.d1}\n\t\t\tmultiline\n\t\t\tetc ${a2 + c2}\n\t\t`);\n\t}\n\n\t*generator() {\n\t\tyield 1;\n\t\tyield* [2, 3];\n\t}\n\n\tasync *async_generator() {\n\t\tyield await Promise.resolve(4);\n\t}\n\n\tprotected async protected_method(): Promise<void> {\n\t\ttry {\n\t\t\tawait new Promise((resolve) => setTimeout(resolve, 100));\n\t\t\tif (Math.random() > 0.5) {\n\t\t\t\tconsole.log(new Date()); // eslint-disable-line no-console\n\t\t\t} else if (Math.random() > 0.2) {\n\t\t\t\tconsole.log('else if branch');\n\t\t\t} else {\n\t\t\t\tconsole.log('else branch');\n\t\t\t}\n\t\t} catch (error: unknown) {\n\t\t\tconsole.error(error);\n\t\t} finally {\n\t\t\tconsole.log('finally block');\n\t\t}\n\t}\n}\n\n// comment\n\n/*\nother comment\n\nconst comment = false;\n*/\n\n/**\n * JSDoc comment\n */\n\nimport {sample_langs, type Sample_Lang} from '../code_sample.js';\nimport * as A from '../code_sample.js';\n\nexport {a, A, b, c, D};\n\nsample_langs as unknown as any as Sample_Lang satisfies Sample_Lang;\n\nexport interface Some_E {\n\tname: string;\n\tage: number;\n}\n\nexport const some_e: Some_E = {name: 'A. H.', age: 100};\n\nexport function add(x: number, y: number): number {\n\treturn x + y;\n}\n\nexport const plus = (a: any, b: any): any => a + b;\n\n// boundary test cases\nexport const str_with_keywords = 'const class function string';\nexport const str_with_comment = '// this is not a comment';\nexport const template_with_expr = `Value: ${1 + 2}`;\n\n// regex that looks like comment\nexport const regex = /\\/\\/.*/g;\nexport const complex_regex = /^(?:\\/\\*.*?\\*\\/|\\/\\/.*|[^/])+$/;\n\n// string in comment should not be highlighted as string\n// const commented = \"this string is in a comment\";\n",
		"filepath": "src/lib/samples/sample_complex.ts"
	},
	"tokens": [
		{"type": "keyword", "start": 0, "end": 5},
		{"type": "operator", "start": 8, "end": 9},
		{"type": "number", "start": 10, "end": 11},
		{"type": "punctuation", "start": 11, "end": 12},
		{"type": "keyword", "start": 14, "end": 19},
		{"type": "operator", "start": 22, "end": 23},
		{"type": "string", "start": 24, "end": 27},
		{"type": "punctuation", "start": 27, "end": 28},
		{"type": "keyword", "start": 30, "end": 35},
		{"type": "operator", "start": 38, "end": 39},
		{"type": "boolean", "start": 40, "end": 44},
		{"type": "punctuation", "start": 44, "end": 45},
		{"type": "special_keyword", "start": 47, "end": 53},
		{"type": "keyword", "start": 54, "end": 58},
		{"type": "class_name", "start": 59, "end": 68},
		{"type": "operator", "start": 69, "end": 70},
		{"type": "number", "start": 71, "end": 72},
		{"type": "operator", "start": 73, "end": 74},
		{"type": "string", "start": 75, "end": 78},
		{"type": "operator", "start": 79, "end": 80},
		{"type": "boolean", "start": 81, "end": 85},
		{"type": "punctuation", "start": 85, "end": 86},
		{"type": "keyword", "start": 88, "end": 95},
		{"type": "keyword", "start": 96, "end": 101},
		{"type": "operator", "start": 117, "end": 118},
		{"type": "builtin", "start": 119, "end": 122},
		{"type": "punctuation", "start": 122, "end": 123},
		{"type": "operator", "start": 142, "end": 143},
		{"type": "builtin", "start": 144, "end": 147},
		{"type": "punctuation", "start": 147, "end": 148},
		{"type": "operator", "start": 165, "end": 166},
		{"type": "builtin", "start": 167, "end": 170},
		{"type": "punctuation", "start": 170, "end": 171},
		{"type": "keyword", "start": 173, "end": 181},
		{"type": "keyword", "start": 182, "end": 187},
		{"type": "class_name", "start": 188, "end": 192},
		{"type": "punctuation", "start": 193, "end": 194},
		{"type": "keyword", "start": 196, "end": 204},
		{"type": "function", "start": 205, "end": 220},
		{"type": "punctuation", "start": 220, "end": 221},
		{"type": "punctuation", "start": 221, "end": 222},
		{"type": "operator", "start": 222, "end": 223},
		{"type": "keyword", "start": 224, "end": 228},
		{"type": "punctuation", "start": 228, "end": 229},
		{"type": "punctuation", "start": 230, "end": 231},
		{"type": "decorator", "start": 233, "end": 249},
		{"type": "at", "start": 233, "end": 234},
		{"type": "function", "start": 234, "end": 249},
		{"type": "keyword", "start": 250, "end": 255},
		{"type": "class_name", "start": 256, "end": 257},
		{"type": "constant", "start": 256, "end": 257},
		{"type": "keyword", "start": 258, "end": 265},
		{"type": "class_name", "start": 266, "end": 270},
		{"type": "punctuation", "start": 271, "end": 272},
		{"type": "keyword", "start": 274, "end": 282},
		{"type": "operator", "start": 285, "end": 286},
		{"type": "builtin", "start": 287, "end": 293},
		{"type": "operator", "start": 294, "end": 295},
		{"type": "string", "start": 296, "end": 299},
		{"type": "punctuation", "start": 299, "end": 300},
		{"type": "operator", "start": 304, "end": 305},
		{"type": "builtin", "start": 306, "end": 312},
		{"type": "punctuation", "start": 312, "end": 313},
		{"type": "operator", "start": 318, "end": 319},
		{"type": "function", "start": 320, "end": 326},
		{"type": "punctuation", "start": 326, "end": 327},
		{"type": "keyword", "start": 327, "end": 331},
		{"type": "punctuation", "start": 331, "end": 332},
		{"type": "punctuation", "start": 332, "end": 333},
		{"type": "decorator", "start": 336, "end": 355},
		{"type": "at", "start": 336, "end": 337},
		{"type": "function", "start": 337, "end": 355},
		{"type": "operator", "start": 367, "end": 368},
		{"type": "boolean", "start": 369, "end": 373},
		{"type": "punctuation", "start": 373, "end": 374},
		{"type": "function", "start": 377, "end": 388},
		{"type": "punctuation", "start": 388, "end": 389},
		{"type": "operator", "start": 391, "end": 392},
		{"type": "builtin", "start": 393, "end": 399},
		{"type": "punctuation", "start": 399, "end": 400},
		{"type": "punctuation", "start": 401, "end": 402},
		{"type": "keyword", "start": 405, "end": 410},
		{"type": "punctuation", "start": 410, "end": 411},
		{"type": "punctuation", "start": 411, "end": 412},
		{"type": "punctuation", "start": 412, "end": 413},
		{"type": "keyword", "start": 416, "end": 420},
		{"type": "punctuation", "start": 420, "end": 421},
		{"type": "operator", "start": 424, "end": 425},
		{"type": "punctuation", "start": 428, "end": 429},
		{"type": "punctuation", "start": 431, "end": 432},
		{"type": "function", "start": 435, "end": 450},
		{"type": "punctuation", "start": 450, "end": 451},
		{"type": "punctuation", "start": 451, "end": 452},
		{"type": "operator", "start": 452, "end": 453},
		{"type": "keyword", "start": 454, "end": 458},
		{"type": "punctuation", "start": 459, "end": 460},
		{"type": "comment", "start": 463, "end": 480},
		{"type": "punctuation", "start": 482, "end": 483},
		{"type": "decorator", "start": 486, "end": 503},
		{"type": "at", "start": 486, "end": 487},
		{"type": "function", "start": 487, "end": 503},
		{"type": "function", "start": 505, "end": 517},
		{"type": "punctuation", "start": 517, "end": 518},
		{"type": "punctuation", "start": 518, "end": 519},
		{"type": "operator", "start": 519, "end": 520},
		{"type": "builtin", "start": 521, "end": 527},
		{"type": "punctuation", "start": 528, "end": 529},
		{"type": "special_keyword", "start": 532, "end": 538},
		{"type": "template_string", "start": 539, "end": 558},
		{"type": "template_punctuation", "start": 539, "end": 540},
		{"type": "string", "start": 540, "end": 547},
		{"type": "interpolation", "start": 547, "end": 557},
		{"type": "interpolation_punctuation", "start": 547, "end": 549},
		{"type": "keyword", "start": 549, "end": 553},
		{"type": "punctuation", "start": 553, "end": 554},
		{"type": "interpolation_punctuation", "start": 556, "end": 557},
		{"type": "template_punctuation", "start": 557, "end": 558},
		{"type": "punctuation", "start": 558, "end": 559},
		{"type": "punctuation", "start": 561, "end": 562},
		{"type": "function_variable", "start": 565, "end": 580},
		{"type": "operator", "start": 581, "end": 582},
		{"type": "punctuation", "start": 583, "end": 584},
		{"type": "punctuation", "start": 584, "end": 585},
		{"type": "operator", "start": 585, "end": 586},
		{"type": "keyword", "start": 587, "end": 591},
		{"type": "operator", "start": 592, "end": 594},
		{"type": "punctuation", "start": 595, "end": 596},
		{"type": "comment", "start": 599, "end": 608},
		{"type": "keyword", "start": 611, "end": 614},
		{"type": "operator", "start": 617, "end": 618},
		{"type": "number", "start": 619, "end": 620},
		{"type": "punctuation", "start": 620, "end": 621},
		{"type": "special_keyword", "start": 624, "end": 626},
		{"type": "punctuation", "start": 627, "end": 628},
		{"type": "operator", "start": 633, "end": 635},
		{"type": "punctuation", "start": 635, "end": 636},
		{"type": "punctuation", "start": 639, "end": 640},
		{"type": "special_keyword", "start": 641, "end": 646},
		{"type": "punctuation", "start": 647, "end": 648},
		{"type": "operator", "start": 650, "end": 651},
		{"type": "number", "start": 652, "end": 653},
		{"type": "punctuation", "start": 653, "end": 654},
		{"type": "punctuation", "start": 654, "end": 655},
		{"type": "special_keyword", "start": 659, "end": 662},
		{"type": "punctuation", "start": 663, "end": 664},
		{"type": "keyword", "start": 664, "end": 669},
		{"type": "keyword", "start": 673, "end": 675},
		{"type": "keyword", "start": 676, "end": 680},
		{"type": "punctuation", "start": 680, "end": 681},
		{"type": "punctuation", "start": 683, "end": 684},
		{"type": "punctuation", "start": 685, "end": 686},
		{"type": "special_keyword", "start": 690, "end": 692},
		{"type": "punctuation", "start": 693, "end": 694},
		{"type": "operator", "start": 697, "end": 700},
		{"type": "string", "start": 701, "end": 704},
		{"type": "punctuation", "start": 704, "end": 705},
		{"type": "special_keyword", "start": 706, "end": 714},
		{"type": "punctuation", "start": 714, "end": 715},
		{"type": "special_keyword", "start": 719, "end": 721},
		{"type": "punctuation", "start": 722, "end": 723},
		{"type": "operator", "start": 723, "end": 724},
		{"type": "punctuation", "start": 726, "end": 727},
		{"type": "special_keyword", "start": 728, "end": 733},
		{"type": "punctuation", "start": 733, "end": 734},
		{"type": "keyword", "start": 738, "end": 742},
		{"type": "punctuation", "start": 742, "end": 743},
		{"type": "function", "start": 743, "end": 758},
		{"type": "punctuation", "start": 758, "end": 759},
		{"type": "punctuation", "start": 760, "end": 761},
		{"type": "punctuation", "start": 764, "end": 765},
		{"type": "punctuation", "start": 765, "end": 766},
		{"type": "punctuation", "start": 769, "end": 770},
		{"type": "special_keyword", "start": 774, "end": 780},
		{"type": "punctuation", "start": 781, "end": 782},
		{"type": "keyword", "start": 782, "end": 786},
		{"type": "punctuation", "start": 786, "end": 787},
		{"type": "punctuation", "start": 789, "end": 790},
		{"type": "punctuation", "start": 791, "end": 792},
		{"type": "special_keyword", "start": 796, "end": 800},
		{"type": "string", "start": 801, "end": 804},
		{"type": "operator", "start": 804, "end": 805},
		{"type": "builtin", "start": 810, "end": 817},
		{"type": "punctuation", "start": 817, "end": 818},
		{"type": "function", "start": 818, "end": 821},
		{"type": "punctuation", "start": 821, "end": 822},
		{"type": "string", "start": 822, "end": 830},
		{"type": "punctuation", "start": 830, "end": 831},
		{"type": "punctuation", "start": 831, "end": 832},
		{"type": "special_keyword", "start": 837, "end": 842},
		{"type": "punctuation", "start": 842, "end": 843},
		{"type": "special_keyword", "start": 847, "end": 851},
		{"type": "string", "start": 852, "end": 855},
		{"type": "operator", "start": 855, "end": 856},
		{"type": "special_keyword", "start": 860, "end": 864},
		{"type": "string", "start": 865, "end": 868},
		{"type": "operator", "start": 868, "end": 869},
		{"type": "builtin", "start": 874, "end": 881},
		{"type": "punctuation", "start": 881, "end": 882},
		{"type": "function", "start": 882, "end": 885},
		{"type": "punctuation", "start": 885, "end": 886},
		{"type": "string", "start": 886, "end": 899},
		{"type": "punctuation", "start": 899, "end": 900},
		{"type": "punctuation", "start": 900, "end": 901},
		{"type": "special_keyword", "start": 906, "end": 911},
		{"type": "punctuation", "start": 911, "end": 912},
		{"type": "keyword", "start": 916, "end": 923},
		{"type": "operator", "start": 923, "end": 924},
		{"type": "builtin", "start": 929, "end": 936},
		{"type": "punctuation", "start": 936, "end": 937},
		{"type": "function", "start": 937, "end": 940},
		{"type": "punctuation", "start": 940, "end": 941},
		{"type": "string", "start": 941, "end": 950},
		{"type": "punctuation", "start": 950, "end": 951},
		{"type": "punctuation", "start": 951, "end": 952},
		{"type": "punctuation", "start": 955, "end": 956},
		{"type": "keyword", "start": 960, "end": 965},
		{"type": "operator", "start": 969, "end": 970},
		{"type": "punctuation", "start": 971, "end": 972},
		{"type": "operator", "start": 978, "end": 979},
		{"type": "operator", "start": 979, "end": 980},
		{"type": "builtin", "start": 981, "end": 988},
		{"type": "punctuation", "start": 988, "end": 989},
		{"type": "operator", "start": 994, "end": 995},
		{"type": "builtin", "start": 996, "end": 1003},
		{"type": "punctuation", "start": 1003, "end": 1004},
		{"type": "operator", "start": 1005, "end": 1006},
		{"type": "punctuation", "start": 1007, "end": 1008},
		{"type": "operator", "start": 1018, "end": 1019},
		{"type": "string", "start": 1020, "end": 1024},
		{"type": "keyword", "start": 1025, "end": 1027},
		{"type": "keyword", "start": 1028, "end": 1032},
		{"type": "punctuation", "start": 1032, "end": 1033},
		{"type": "operator", "start": 1041, "end": 1042},
		{"type": "keyword", "start": 1043, "end": 1047},
		{"type": "keyword", "start": 1048, "end": 1058},
		{"type": "class_name", "start": 1059, "end": 1060},
		{"type": "constant", "start": 1059, "end": 1060},
		{"type": "punctuation", "start": 1060, "end": 1061},
		{"type": "punctuation", "start": 1064, "end": 1065},
		{"type": "punctuation", "start": 1065, "end": 1066},
		{"type": "keyword", "start": 1069, "end": 1075},
		{"type": "punctuation", "start": 1079, "end": 1080},
		{"type": "punctuation", "start": 1086, "end": 1087},
		{"type": "comment", "start": 1090, "end": 1096},
		{"type": "punctuation", "start": 1098, "end": 1099},
		{"type": "punctuation", "start": 1099, "end": 1100},
		{"type": "function", "start": 1103, "end": 1118},
		{"type": "punctuation", "start": 1118, "end": 1119},
		{"type": "operator", "start": 1121, "end": 1122},
		{"type": "builtin", "start": 1123, "end": 1129},
		{"type": "punctuation", "start": 1129, "end": 1130},
		{"type": "operator", "start": 1133, "end": 1134},
		{"type": "builtin", "start": 1135, "end": 1138},
		{"type": "punctuation", "start": 1138, "end": 1139},
		{"type": "punctuation", "start": 1140, "end": 1141},
		{"type": "special_keyword", "start": 1144, "end": 1149},
		{"type": "keyword", "start": 1150, "end": 1153},
		{"type": "class_name", "start": 1154, "end": 1159},
		{"type": "punctuation", "start": 1159, "end": 1160},
		{"type": "template_string", "start": 1160, "end": 1206},
		{"type": "template_punctuation", "start": 1160, "end": 1161},
		{"type": "interpolation", "start": 1161, "end": 1171},
		{"type": "interpolation_punctuation", "start": 1161, "end": 1163},
		{"type": "keyword", "start": 1163, "end": 1167},
		{"type": "punctuation", "start": 1167, "end": 1168},
		{"type": "interpolation_punctuation", "start": 1170, "end": 1171},
		{"type": "string", "start": 1171, "end": 1192},
		{"type": "interpolation", "start": 1192, "end": 1202},
		{"type": "interpolation_punctuation", "start": 1192, "end": 1194},
		{"type": "operator", "start": 1197, "end": 1198},
		{"type": "interpolation_punctuation", "start": 1201, "end": 1202},
		{"type": "string", "start": 1202, "end": 1205},
		{"type": "template_punctuation", "start": 1205, "end": 1206},
		{"type": "punctuation", "start": 1206, "end": 1207},
		{"type": "punctuation", "start": 1207, "end": 1208},
		{"type": "punctuation", "start": 1210, "end": 1211},
		{"type": "operator", "start": 1214, "end": 1215},
		{"type": "function", "start": 1215, "end": 1224},
		{"type": "punctuation", "start": 1224, "end": 1225},
		{"type": "punctuation", "start": 1225, "end": 1226},
		{"type": "punctuation", "start": 1227, "end": 1228},
		{"type": "keyword", "start": 1231, "end": 1236},
		{"type": "number", "start": 1237, "end": 1238},
		{"type": "punctuation", "start": 1238, "end": 1239},
		{"type": "keyword", "start": 1242, "end": 1247},
		{"type": "operator", "start": 1247, "end": 1248},
		{"type": "punctuation", "start": 1249, "end": 1250},
		{"type": "number", "start": 1250, "end": 1251},
		{"type": "punctuation", "start": 1251, "end": 1252},
		{"type": "number", "start": 1253, "end": 1254},
		{"type": "punctuation", "start": 1254, "end": 1255},
		{"type": "punctuation", "start": 1255, "end": 1256},
		{"type": "punctuation", "start": 1258, "end": 1259},
		{"type": "operator", "start": 1268, "end": 1269},
		{"type": "function", "start": 1269, "end": 1284},
		{"type": "punctuation", "start": 1284, "end": 1285},
		{"type": "punctuation", "start": 1285, "end": 1286},
		{"type": "punctuation", "start": 1287, "end": 1288},
		{"type": "keyword", "start": 1291, "end": 1296},
		{"type": "special_keyword", "start": 1297, "end": 1302},
		{"type": "builtin", "start": 1303, "end": 1310},
		{"type": "punctuation", "start": 1310, "end": 1311},
		{"type": "function", "start": 1311, "end": 1318},
		{"type": "punctuation", "start": 1318, "end": 1319},
		{"type": "number", "start": 1319, "end": 1320},
		{"type": "punctuation", "start": 1320, "end": 1321},
		{"type": "punctuation", "start": 1321, "end": 1322},
		{"type": "punctuation", "start": 1324, "end": 1325},
		{"type": "keyword", "start": 1328, "end": 1337},
		{"type": "keyword", "start": 1338, "end": 1343},
		{"type": "function", "start": 1344, "end": 1360},
		{"type": "punctuation", "start": 1360, "end": 1361},
		{"type": "punctuation", "start": 1361, "end": 1362},
		{"type": "operator", "start": 1362, "end": 1363},
		{"type": "builtin", "start": 1364, "end": 1371},
		{"type": "operator", "start": 1371, "end": 1372},
		{"type": "keyword", "start": 1372, "end": 1376},
		{"type": "operator", "start": 1376, "end": 1377},
		{"type": "punctuation", "start": 1378, "end": 1379},
		{"type": "special_keyword", "start": 1382, "end": 1385},
		{"type": "punctuation", "start": 1386, "end": 1387},
		{"type": "special_keyword", "start": 1391, "end": 1396},
		{"type": "keyword", "start": 1397, "end": 1400},
		{"type": "class_name", "start": 1401, "end": 1408},
		{"type": "builtin", "start": 1401, "end": 1408},
		{"type": "punctuation", "start": 1408, "end": 1409},
		{"type": "punctuation", "start": 1409, "end": 1410},
		{"type": "punctuation", "start": 1417, "end": 1418},
		{"type": "operator", "start": 1419, "end": 1421},
		{"type": "function", "start": 1422, "end": 1432},
		{"type": "punctuation", "start": 1432, "end": 1433},
		{"type": "punctuation", "start": 1440, "end": 1441},
		{"type": "number", "start": 1442, "end": 1445},
		{"type": "punctuation", "start": 1445, "end": 1446},
		{"type": "punctuation", "start": 1446, "end": 1447},
		{"type": "punctuation", "start": 1447, "end": 1448},
		{"type": "special_keyword", "start": 1452, "end": 1454},
		{"type": "punctuation", "start": 1455, "end": 1456},
		{"type": "punctuation", "start": 1460, "end": 1461},
		{"type": "function", "start": 1461, "end": 1467},
		{"type": "punctuation", "start": 1467, "end": 1468},
		{"type": "punctuation", "start": 1468, "end": 1469},
		{"type": "operator", "start": 1470, "end": 1471},
		{"type": "number", "start": 1472, "end": 1475},
		{"type": "punctuation", "start": 1475, "end": 1476},
		{"type": "punctuation", "start": 1477, "end": 1478},
		{"type": "builtin", "start": 1483, "end": 1490},
		{"type": "punctuation", "start": 1490, "end": 1491},
		{"type": "function", "start": 1491, "end": 1494},
		{"type": "punctuation", "start": 1494, "end": 1495},
		{"type": "keyword", "start": 1495, "end": 1498},
		{"type": "class_name", "start": 1499, "end": 1503},
		{"type": "punctuation", "start": 1503, "end": 1504},
		{"type": "punctuation", "start": 1504, "end": 1505},
		{"type": "punctuation", "start": 1505, "end": 1506},
		{"type": "punctuation", "start": 1506, "end": 1507},
		{"type": "comment", "start": 1508, "end": 1541},
		{"type": "punctuation", "start": 1545, "end": 1546},
		{"type": "special_keyword", "start": 1547, "end": 1551},
		{"type": "special_keyword", "start": 1552, "end": 1554},
		{"type": "punctuation", "start": 1555, "end": 1556},
		{"type": "punctuation", "start": 1560, "end": 1561},
		{"type": "function", "start": 1561, "end": 1567},
		{"type": "punctuation", "start": 1567, "end": 1568},
		{"type": "punctuation", "start": 1568, "end": 1569},
		{"type": "operator", "start": 1570, "end": 1571},
		{"type": "number", "start": 1572, "end": 1575},
		{"type": "punctuation", "start": 1575, "end": 1576},
		{"type": "punctuation", "start": 1577, "end": 1578},
		{"type": "builtin", "start": 1583, "end": 1590},
		{"type": "punctuation", "start": 1590, "end": 1591},
		{"type": "function", "start": 1591, "end": 1594},
		{"type": "punctuation", "start": 1594, "end": 1595},
		{"type": "string", "start": 1595, "end": 1611},
		{"type": "punctuation", "start": 1611, "end": 1612},
		{"type": "punctuation", "start": 1612, "end": 1613},
		{"type": "punctuation", "start": 1617, "end": 1618},
		{"type": "special_keyword", "start": 1619, "end": 1623},
		{"type": "punctuation", "start": 1624, "end": 1625},
		{"type": "builtin", "start": 1630, "end": 1637},
		{"type": "punctuation", "start": 1637, "end": 1638},
		{"type": "function", "start": 1638, "end": 1641},
		{"type": "punctuation", "start": 1641, "end": 1642},
		{"type": "string", "start": 1642, "end": 1655},
		{"type": "punctuation", "start": 1655, "end": 1656},
		{"type": "punctuation", "start": 1656, "end": 1657},
		{"type": "punctuation", "start": 1661, "end": 1662},
		{"type": "punctuation", "start": 1665, "end": 1666},
		{"type": "special_keyword", "start": 1667, "end": 1672},
		{"type": "punctuation", "start": 1673, "end": 1674},
		{"type": "operator", "start": 1679, "end": 1680},
		{"type": "builtin", "start": 1681, "end": 1688},
		{"type": "punctuation", "start": 1688, "end": 1689},
		{"type": "punctuation", "start": 1690, "end": 1691},
		{"type": "builtin", "start": 1695, "end": 1702},
		{"type": "punctuation", "start": 1702, "end": 1703},
		{"type": "function", "start": 1703, "end": 1708},
		{"type": "punctuation", "start": 1708, "end": 1709},
		{"type": "punctuation", "start": 1714, "end": 1715},
		{"type": "punctuation", "start": 1715, "end": 1716},
		{"type": "punctuation", "start": 1719, "end": 1720},
		{"type": "special_keyword", "start": 1721, "end": 1728},
		{"type": "punctuation", "start": 1729, "end": 1730},
		{"type": "builtin", "start": 1734, "end": 1741},
		{"type": "punctuation", "start": 1741, "end": 1742},
		{"type": "function", "start": 1742, "end": 1745},
		{"type": "punctuation", "start": 1745, "end": 1746},
		{"type": "string", "start": 1746, "end": 1761},
		{"type": "punctuation", "start": 1761, "end": 1762},
		{"type": "punctuation", "start": 1762, "end": 1763},
		{"type": "punctuation", "start": 1766, "end": 1767},
		{"type": "punctuation", "start": 1769, "end": 1770},
		{"type": "punctuation", "start": 1771, "end": 1772},
		{"type": "comment", "start": 1774, "end": 1784},
		{"type": "comment", "start": 1786, "end": 1829},
		{"type": "comment", "start": 1831, "end": 1855},
		{"type": "special_keyword", "start": 1857, "end": 1863},
		{"type": "punctuation", "start": 1864, "end": 1865},
		{"type": "punctuation", "start": 1877, "end": 1878},
		{"type": "keyword", "start": 1879, "end": 1883},
		{"type": "class_name", "start": 1884, "end": 1895},
		{"type": "punctuation", "start": 1895, "end": 1896},
		{"type": "special_keyword", "start": 1897, "end": 1901},
		{"type": "string", "start": 1902, "end": 1921},
		{"type": "punctuation", "start": 1921, "end": 1922},
		{"type": "special_keyword", "start": 1923, "end": 1929},
		{"type": "operator", "start": 1930, "end": 1931},
		{"type": "special_keyword", "start": 1932, "end": 1934},
		{"type": "constant", "start": 1935, "end": 1936},
		{"type": "special_keyword", "start": 1937, "end": 1941},
		{"type": "string", "start": 1942, "end": 1961},
		{"type": "punctuation", "start": 1961, "end": 1962},
		{"type": "special_keyword", "start": 1964, "end": 1970},
		{"type": "punctuation", "start": 1971, "end": 1972},
		{"type": "punctuation", "start": 1973, "end": 1974},
		{"type": "constant", "start": 1975, "end": 1976},
		{"type": "punctuation", "start": 1976, "end": 1977},
		{"type": "punctuation", "start": 1979, "end": 1980},
		{"type": "punctuation", "start": 1982, "end": 1983},
		{"type": "constant", "start": 1984, "end": 1985},
		{"type": "punctuation", "start": 1985, "end": 1986},
		{"type": "punctuation", "start": 1986, "end": 1987},
		{"type": "special_keyword", "start": 2002, "end": 2004},
		{"type": "builtin", "start": 2005, "end": 2012},
		{"type": "special_keyword", "start": 2013, "end": 2015},
		{"type": "builtin", "start": 2016, "end": 2019},
		{"type": "special_keyword", "start": 2020, "end": 2022},
		{"type": "punctuation", "start": 2056, "end": 2057},
		{"type": "special_keyword", "start": 2059, "end": 2065},
		{"type": "keyword", "start": 2066, "end": 2075},
		{"type": "class_name", "start": 2076, "end": 2082},
		{"type": "punctuation", "start": 2083, "end": 2084},
		{"type": "operator", "start": 2090, "end": 2091},
		{"type": "builtin", "start": 2092, "end": 2098},
		{"type": "punctuation", "start": 2098, "end": 2099},
		{"type": "operator", "start": 2104, "end": 2105},
		{"type": "builtin", "start": 2106, "end": 2112},
		{"type": "punctuation", "start": 2112, "end": 2113},
		{"type": "punctuation", "start": 2114, "end": 2115},
		{"type": "special_keyword", "start": 2117, "end": 2123},
		{"type": "keyword", "start": 2124, "end": 2129},
		{"type": "operator", "start": 2136, "end": 2137},
		{"type": "operator", "start": 2145, "end": 2146},
		{"type": "punctuation", "start": 2147, "end": 2148},
		{"type": "operator", "start": 2152, "end": 2153},
		{"type": "string", "start": 2154, "end": 2161},
		{"type": "punctuation", "start": 2161, "end": 2162},
		{"type": "operator", "start": 2166, "end": 2167},
		{"type": "number", "start": 2168, "end": 2171},
		{"type": "punctuation", "start": 2171, "end": 2172},
		{"type": "punctuation", "start": 2172, "end": 2173},
		{"type": "special_keyword", "start": 2175, "end": 2181},
		{"type": "keyword", "start": 2182, "end": 2190},
		{"type": "function", "start": 2191, "end": 2194},
		{"type": "punctuation", "start": 2194, "end": 2195},
		{"type": "operator", "start": 2196, "end": 2197},
		{"type": "builtin", "start": 2198, "end": 2204},
		{"type": "punctuation", "start": 2204, "end": 2205},
		{"type": "operator", "start": 2207, "end": 2208},
		{"type": "builtin", "start": 2209, "end": 2215},
		{"type": "punctuation", "start": 2215, "end": 2216},
		{"type": "operator", "start": 2216, "end": 2217},
		{"type": "builtin", "start": 2218, "end": 2224},
		{"type": "punctuation", "start": 2225, "end": 2226},
		{"type": "special_keyword", "start": 2228, "end": 2234},
		{"type": "operator", "start": 2237, "end": 2238},
		{"type": "punctuation", "start": 2240, "end": 2241},
		{"type": "punctuation", "start": 2242, "end": 2243},
		{"type": "special_keyword", "start": 2245, "end": 2251},
		{"type": "keyword", "start": 2252, "end": 2257},
		{"type": "function_variable", "start": 2258, "end": 2262},
		{"type": "operator", "start": 2263, "end": 2264},
		{"type": "punctuation", "start": 2265, "end": 2266},
		{"type": "operator", "start": 2267, "end": 2268},
		{"type": "builtin", "start": 2269, "end": 2272},
		{"type": "punctuation", "start": 2272, "end": 2273},
		{"type": "operator", "start": 2275, "end": 2276},
		{"type": "builtin", "start": 2277, "end": 2280},
		{"type": "punctuation", "start": 2280, "end": 2281},
		{"type": "operator", "start": 2281, "end": 2282},
		{"type": "builtin", "start": 2283, "end": 2286},
		{"type": "operator", "start": 2287, "end": 2289},
		{"type": "operator", "start": 2292, "end": 2293},
		{"type": "punctuation", "start": 2295, "end": 2296},
		{"type": "comment", "start": 2298, "end": 2320},
		{"type": "special_keyword", "start": 2321, "end": 2327},
		{"type": "keyword", "start": 2328, "end": 2333},
		{"type": "operator", "start": 2352, "end": 2353},
		{"type": "string", "start": 2354, "end": 2383},
		{"type": "punctuation", "start": 2383, "end": 2384},
		{"type": "special_keyword", "start": 2385, "end": 2391},
		{"type": "keyword", "start": 2392, "end": 2397},
		{"type": "operator", "start": 2415, "end": 2416},
		{"type": "string", "start": 2417, "end": 2443},
		{"type": "punctuation", "start": 2443, "end": 2444},
		{"type": "special_keyword", "start": 2445, "end": 2451},
		{"type": "keyword", "start": 2452, "end": 2457},
		{"type": "operator", "start": 2477, "end": 2478},
		{"type": "template_string", "start": 2479, "end": 2496},
		{"type": "template_punctuation", "start": 2479, "end": 2480},
		{"type": "string", "start": 2480, "end": 2487},
		{"type": "interpolation", "start": 2487, "end": 2495},
		{"type": "interpolation_punctuation", "start": 2487, "end": 2489},
		{"type": "number", "start": 2489, "end": 2490},
		{"type": "operator", "start": 2491, "end": 2492},
		{"type": "number", "start": 2493, "end": 2494},
		{"type": "interpolation_punctuation", "start": 2494, "end": 2495},
		{"type": "template_punctuation", "start": 2495, "end": 2496},
		{"type": "punctuation", "start": 2496, "end": 2497},
		{"type": "comment", "start": 2499, "end": 2531},
		{"type": "special_keyword", "start": 2532, "end": 2538},
		{"type": "keyword", "start": 2539, "end": 2544},
		{"type": "operator", "start": 2551, "end": 2552},
		{"type": "regex", "start": 2553, "end": 2562},
		{"type": "regex_delimiter", "start": 2553, "end": 2554},
		{"type": "regex_source", "start": 2554, "end": 2560},
		{"type": "regex_delimiter", "start": 2560, "end": 2561},
		{"type": "regex_flags", "start": 2561, "end": 2562},
		{"type": "punctuation", "start": 2562, "end": 2563},
		{"type": "special_keyword", "start": 2564, "end": 2570},
		{"type": "keyword", "start": 2571, "end": 2576},
		{"type": "operator", "start": 2591, "end": 2592},
		{"type": "regex", "start": 2593, "end": 2625},
		{"type": "regex_delimiter", "start": 2593, "end": 2594},
		{"type": "regex_source", "start": 2594, "end": 2624},
		{"type": "regex_delimiter", "start": 2624, "end": 2625},
		{"type": "punctuation", "start": 2625, "end": 2626},
		{"type": "comment", "start": 2628, "end": 2684},
		{"type": "comment", "start": 2685, "end": 2736}
	],
	"html": "<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class_name\">Some_Type</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">const</span> class_decorator<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> property_decorator<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> method_decorator<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class_name\">Base</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">abstract</span> <span class=\"token function\">abstract_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">class_decorator</span></span>\n<span class=\"token keyword\">class</span> <span class=\"token class_name\"><span class=\"token constant\">D</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class_name\">Base</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">readonly</span> d1<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">;</span>\n\td2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\td3 <span class=\"token operator\">=</span> <span class=\"token function\">$state</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">property_decorator</span></span>\n\tdecorated <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>d2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d2 <span class=\"token operator\">=</span> d2<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">abstract_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// implementation</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">method_decorator</span></span>\n\t<span class=\"token function\">class_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token special_keyword\">return</span> <span class=\"token template_string\"><span class=\"token template_punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d1<span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token template_punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function_variable function\">instance_method</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">/* ... */</span>\n\t\t<span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token special_keyword\">do</span> <span class=\"token punctuation\">{</span>\n\t\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token special_keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token special_keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> c2 <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token special_keyword\">if</span> <span class=\"token punctuation\">(</span>c2 <span class=\"token operator\">===</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">)</span> <span class=\"token special_keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token special_keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>c2<span class=\"token punctuation\">)</span> <span class=\"token special_keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">#private_method</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token special_keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token special_keyword\">case</span> <span class=\"token string\">'a'</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'case a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token special_keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token special_keyword\">case</span> <span class=\"token string\">'b'</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token special_keyword\">case</span> <span class=\"token string\">'c'</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'case b or c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token special_keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'default'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">const</span> obj<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>has_d1<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span> is_d<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t\thas_d1<span class=\"token operator\">:</span> <span class=\"token string\">'d1'</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n\t\t\tis_d<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class_name\"><span class=\"token constant\">D</span></span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>has_d1<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// foo</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">#private_method</span><span class=\"token punctuation\">(</span>a2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> c2<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token special_keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class_name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template_string\"><span class=\"token template_punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d1<span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token string\">\n\t\t\tmultiline\n\t\t\tetc </span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span>a2 <span class=\"token operator\">+</span> c2<span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token string\">\n\t\t</span><span class=\"token template_punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token operator\">*</span><span class=\"token function\">generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">yield</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tasync <span class=\"token operator\">*</span><span class=\"token function\">async_generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">yield</span> <span class=\"token special_keyword\">await</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">async</span> <span class=\"token function\">protected_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token special_keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token special_keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class_name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token special_keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class_name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// eslint-disable-line no-console</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token special_keyword\">else</span> <span class=\"token special_keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'else if branch'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token special_keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'else branch'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token special_keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token special_keyword\">finally</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'finally block'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// comment</span>\n\n<span class=\"token comment\">/*\nother comment\n\nconst comment = false;\n*/</span>\n\n<span class=\"token comment\">/**\n * JSDoc comment\n */</span>\n\n<span class=\"token special_keyword\">import</span> <span class=\"token punctuation\">{</span>sample_langs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">type</span> <span class=\"token class_name\">Sample_Lang</span><span class=\"token punctuation\">}</span> <span class=\"token special_keyword\">from</span> <span class=\"token string\">'../code_sample.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token special_keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token special_keyword\">as</span> <span class=\"token constant\">A</span> <span class=\"token special_keyword\">from</span> <span class=\"token string\">'../code_sample.js'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token special_keyword\">export</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nsample_langs <span class=\"token special_keyword\">as</span> <span class=\"token builtin\">unknown</span> <span class=\"token special_keyword\">as</span> <span class=\"token builtin\">any</span> <span class=\"token special_keyword\">as</span> Sample_Lang satisfies Sample_Lang<span class=\"token punctuation\">;</span>\n\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class_name\">Some_E</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\tage<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">const</span> some_e<span class=\"token operator\">:</span> Some_E <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'A. H.'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token special_keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function_variable function\">plus</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// boundary test cases</span>\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">const</span> str_with_keywords <span class=\"token operator\">=</span> <span class=\"token string\">'const class function string'</span><span class=\"token punctuation\">;</span>\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">const</span> str_with_comment <span class=\"token operator\">=</span> <span class=\"token string\">'// this is not a comment'</span><span class=\"token punctuation\">;</span>\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">const</span> template_with_expr <span class=\"token operator\">=</span> <span class=\"token template_string\"><span class=\"token template_punctuation string\">`</span><span class=\"token string\">Value: </span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token template_punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// regex that looks like comment</span>\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">const</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex_delimiter\">/</span><span class=\"token regex_source lang_regex\">\\/\\/.*</span><span class=\"token regex_delimiter\">/</span><span class=\"token regex_flags\">g</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">const</span> complex_regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex_delimiter\">/</span><span class=\"token regex_source lang_regex\">^(?:\\/\\*.*?\\*\\/|\\/\\/.*|[^/])+$</span><span class=\"token regex_delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// string in comment should not be highlighted as string</span>\n<span class=\"token comment\">// const commented = \"this string is in a comment\";</span>\n"
}
