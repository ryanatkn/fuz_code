{
	"sample": {
		"lang": "ts",
		"variant": "complex",
		"content": "const a = 1;\n\nconst b = 'b';\n\nconst c = true;\n\nexport type Some_Type = 1 | 'b' | true;\n\nclass D {\n\td1: string = 'd';\n\td2: number;\n\td3 = $state(null);\n\n\tconstructor(d2: number) {\n\t\tthis.d2 = d2;\n\t}\n\n\tclass_method(): string {\n\t\treturn `Hello, ${this.d1}`;\n\t}\n\n\tinstance_method = (): void => {\n\t\t/* ... */\n\t\tfor (const c2 of this.d1) {\n\t\t\tthis.#private_method(a, c2);\n\t\t}\n\t\t// foo\n\t};\n\n\t#private_method(a2: number, c2: any) {\n\t\tthrow new Error(`${this.d1} \n\t\t\tmultiline\n\t\t\tetc ${a2 + c2}\n\t\t`);\n\t}\n\n\tprotected protected_method(): void {\n\t\tconsole.log(new Date()); // eslint-disable-line no-console\n\t}\n}\n\n// comment\n\n/*\nother comment\n\nconst comment = false;\n*/\n\n/**\n * JSDoc comment\n */\n\nimport {sample_langs, type Code_Sample, type Sample_Lang} from '../code_sample.js';\nimport * as A from '../code_sample.js';\n\nsample_langs as unknown as Code_Sample as any as Sample_Lang;\n\nexport {a, A, b, c, D};\n\nexport interface Some_E {\n\tname: string;\n\tage: number;\n}\n\nexport const some_e: Some_E = {name: 'A. H.', age: 100};\n\nexport function add(x: number, y: number): number {\n\treturn x + y;\n}\n\nexport const plus = (a: any, b: any): any => a + b;\n\n// boundary test cases\nexport const str_with_keywords = 'const class function string';\nexport const str_with_comment = '// this is not a comment';\nexport const template_with_expr = `Value: ${1 + 2}`;\n\n// regex that looks like comment\nexport const regex = /\\/\\/.*/g;\nexport const complex_regex = /^(?:\\/\\*.*?\\*\\/|\\/\\/.*|[^/])+$/;\n\n// string in comment should not be highlighted as string\n// const commented = \"this string is in a comment\";\n",
		"filepath": "src/lib/samples/sample_complex.ts"
	},
	"tokens": [
		{"type": "keyword", "start": 0, "end": 5},
		{"type": "operator", "start": 8, "end": 9},
		{"type": "number", "start": 10, "end": 11},
		{"type": "punctuation", "start": 11, "end": 12},
		{"type": "keyword", "start": 14, "end": 19},
		{"type": "operator", "start": 22, "end": 23},
		{"type": "string", "start": 24, "end": 27},
		{"type": "punctuation", "start": 27, "end": 28},
		{"type": "keyword", "start": 30, "end": 35},
		{"type": "operator", "start": 38, "end": 39},
		{"type": "boolean", "start": 40, "end": 44},
		{"type": "punctuation", "start": 44, "end": 45},
		{"type": "keyword", "start": 47, "end": 53},
		{"type": "keyword", "start": 54, "end": 58},
		{"type": "class_name", "start": 59, "end": 68},
		{"type": "operator", "start": 69, "end": 70},
		{"type": "number", "start": 71, "end": 72},
		{"type": "operator", "start": 73, "end": 74},
		{"type": "string", "start": 75, "end": 78},
		{"type": "operator", "start": 79, "end": 80},
		{"type": "boolean", "start": 81, "end": 85},
		{"type": "punctuation", "start": 85, "end": 86},
		{"type": "keyword", "start": 88, "end": 93},
		{"type": "class_name", "start": 94, "end": 95},
		{"type": "constant", "start": 94, "end": 95},
		{"type": "punctuation", "start": 96, "end": 97},
		{"type": "operator", "start": 101, "end": 102},
		{"type": "builtin", "start": 103, "end": 109},
		{"type": "operator", "start": 110, "end": 111},
		{"type": "string", "start": 112, "end": 115},
		{"type": "punctuation", "start": 115, "end": 116},
		{"type": "operator", "start": 120, "end": 121},
		{"type": "builtin", "start": 122, "end": 128},
		{"type": "punctuation", "start": 128, "end": 129},
		{"type": "operator", "start": 134, "end": 135},
		{"type": "function", "start": 136, "end": 142},
		{"type": "punctuation", "start": 142, "end": 143},
		{"type": "keyword", "start": 143, "end": 147},
		{"type": "punctuation", "start": 147, "end": 148},
		{"type": "punctuation", "start": 148, "end": 149},
		{"type": "function", "start": 152, "end": 163},
		{"type": "punctuation", "start": 163, "end": 164},
		{"type": "operator", "start": 166, "end": 167},
		{"type": "builtin", "start": 168, "end": 174},
		{"type": "punctuation", "start": 174, "end": 175},
		{"type": "punctuation", "start": 176, "end": 177},
		{"type": "keyword", "start": 180, "end": 184},
		{"type": "punctuation", "start": 184, "end": 185},
		{"type": "operator", "start": 188, "end": 189},
		{"type": "punctuation", "start": 192, "end": 193},
		{"type": "punctuation", "start": 195, "end": 196},
		{"type": "function", "start": 199, "end": 211},
		{"type": "punctuation", "start": 211, "end": 212},
		{"type": "punctuation", "start": 212, "end": 213},
		{"type": "operator", "start": 213, "end": 214},
		{"type": "builtin", "start": 215, "end": 221},
		{"type": "punctuation", "start": 222, "end": 223},
		{"type": "keyword", "start": 226, "end": 232},
		{"type": "template_string", "start": 233, "end": 252},
		{"type": "template_punctuation", "start": 233, "end": 234},
		{"type": "string", "start": 234, "end": 241},
		{"type": "interpolation", "start": 241, "end": 251},
		{"type": "interpolation_punctuation", "start": 241, "end": 243},
		{"type": "keyword", "start": 243, "end": 247},
		{"type": "punctuation", "start": 247, "end": 248},
		{"type": "interpolation_punctuation", "start": 250, "end": 251},
		{"type": "template_punctuation", "start": 251, "end": 252},
		{"type": "punctuation", "start": 252, "end": 253},
		{"type": "punctuation", "start": 255, "end": 256},
		{"type": "operator", "start": 275, "end": 276},
		{"type": "punctuation", "start": 277, "end": 278},
		{"type": "punctuation", "start": 278, "end": 279},
		{"type": "operator", "start": 279, "end": 280},
		{"type": "keyword", "start": 281, "end": 285},
		{"type": "operator", "start": 286, "end": 288},
		{"type": "punctuation", "start": 289, "end": 290},
		{"type": "comment", "start": 293, "end": 302},
		{"type": "keyword", "start": 305, "end": 308},
		{"type": "punctuation", "start": 309, "end": 310},
		{"type": "keyword", "start": 310, "end": 315},
		{"type": "keyword", "start": 319, "end": 321},
		{"type": "keyword", "start": 322, "end": 326},
		{"type": "punctuation", "start": 326, "end": 327},
		{"type": "punctuation", "start": 329, "end": 330},
		{"type": "punctuation", "start": 331, "end": 332},
		{"type": "keyword", "start": 336, "end": 340},
		{"type": "punctuation", "start": 340, "end": 341},
		{"type": "function", "start": 341, "end": 356},
		{"type": "punctuation", "start": 356, "end": 357},
		{"type": "punctuation", "start": 358, "end": 359},
		{"type": "punctuation", "start": 362, "end": 363},
		{"type": "punctuation", "start": 363, "end": 364},
		{"type": "punctuation", "start": 367, "end": 368},
		{"type": "comment", "start": 371, "end": 377},
		{"type": "punctuation", "start": 379, "end": 380},
		{"type": "punctuation", "start": 380, "end": 381},
		{"type": "function", "start": 384, "end": 399},
		{"type": "punctuation", "start": 399, "end": 400},
		{"type": "operator", "start": 402, "end": 403},
		{"type": "builtin", "start": 404, "end": 410},
		{"type": "punctuation", "start": 410, "end": 411},
		{"type": "operator", "start": 414, "end": 415},
		{"type": "builtin", "start": 416, "end": 419},
		{"type": "punctuation", "start": 419, "end": 420},
		{"type": "punctuation", "start": 421, "end": 422},
		{"type": "keyword", "start": 425, "end": 430},
		{"type": "keyword", "start": 431, "end": 434},
		{"type": "class_name", "start": 435, "end": 440},
		{"type": "punctuation", "start": 440, "end": 441},
		{"type": "template_string", "start": 441, "end": 488},
		{"type": "template_punctuation", "start": 441, "end": 442},
		{"type": "interpolation", "start": 442, "end": 452},
		{"type": "interpolation_punctuation", "start": 442, "end": 444},
		{"type": "keyword", "start": 444, "end": 448},
		{"type": "punctuation", "start": 448, "end": 449},
		{"type": "interpolation_punctuation", "start": 451, "end": 452},
		{"type": "string", "start": 452, "end": 474},
		{"type": "interpolation", "start": 474, "end": 484},
		{"type": "interpolation_punctuation", "start": 474, "end": 476},
		{"type": "operator", "start": 479, "end": 480},
		{"type": "interpolation_punctuation", "start": 483, "end": 484},
		{"type": "string", "start": 484, "end": 487},
		{"type": "template_punctuation", "start": 487, "end": 488},
		{"type": "punctuation", "start": 488, "end": 489},
		{"type": "punctuation", "start": 489, "end": 490},
		{"type": "punctuation", "start": 492, "end": 493},
		{"type": "keyword", "start": 496, "end": 505},
		{"type": "function", "start": 506, "end": 522},
		{"type": "punctuation", "start": 522, "end": 523},
		{"type": "punctuation", "start": 523, "end": 524},
		{"type": "operator", "start": 524, "end": 525},
		{"type": "keyword", "start": 526, "end": 530},
		{"type": "punctuation", "start": 531, "end": 532},
		{"type": "builtin", "start": 535, "end": 542},
		{"type": "punctuation", "start": 542, "end": 543},
		{"type": "function", "start": 543, "end": 546},
		{"type": "punctuation", "start": 546, "end": 547},
		{"type": "keyword", "start": 547, "end": 550},
		{"type": "class_name", "start": 551, "end": 555},
		{"type": "punctuation", "start": 555, "end": 556},
		{"type": "punctuation", "start": 556, "end": 557},
		{"type": "punctuation", "start": 557, "end": 558},
		{"type": "punctuation", "start": 558, "end": 559},
		{"type": "comment", "start": 560, "end": 593},
		{"type": "punctuation", "start": 595, "end": 596},
		{"type": "punctuation", "start": 597, "end": 598},
		{"type": "comment", "start": 600, "end": 610},
		{"type": "comment", "start": 612, "end": 655},
		{"type": "comment", "start": 657, "end": 681},
		{"type": "keyword", "start": 683, "end": 689},
		{"type": "punctuation", "start": 690, "end": 691},
		{"type": "punctuation", "start": 703, "end": 704},
		{"type": "keyword", "start": 705, "end": 709},
		{"type": "class_name", "start": 710, "end": 721},
		{"type": "punctuation", "start": 721, "end": 722},
		{"type": "keyword", "start": 723, "end": 727},
		{"type": "class_name", "start": 728, "end": 739},
		{"type": "punctuation", "start": 739, "end": 740},
		{"type": "keyword", "start": 741, "end": 745},
		{"type": "string", "start": 746, "end": 765},
		{"type": "punctuation", "start": 765, "end": 766},
		{"type": "keyword", "start": 767, "end": 773},
		{"type": "operator", "start": 774, "end": 775},
		{"type": "keyword", "start": 776, "end": 778},
		{"type": "constant", "start": 779, "end": 780},
		{"type": "keyword", "start": 781, "end": 785},
		{"type": "string", "start": 786, "end": 805},
		{"type": "punctuation", "start": 805, "end": 806},
		{"type": "keyword", "start": 821, "end": 823},
		{"type": "builtin", "start": 824, "end": 831},
		{"type": "keyword", "start": 832, "end": 834},
		{"type": "keyword", "start": 847, "end": 849},
		{"type": "builtin", "start": 850, "end": 853},
		{"type": "keyword", "start": 854, "end": 856},
		{"type": "punctuation", "start": 868, "end": 869},
		{"type": "keyword", "start": 871, "end": 877},
		{"type": "punctuation", "start": 878, "end": 879},
		{"type": "punctuation", "start": 880, "end": 881},
		{"type": "constant", "start": 882, "end": 883},
		{"type": "punctuation", "start": 883, "end": 884},
		{"type": "punctuation", "start": 886, "end": 887},
		{"type": "punctuation", "start": 889, "end": 890},
		{"type": "constant", "start": 891, "end": 892},
		{"type": "punctuation", "start": 892, "end": 893},
		{"type": "punctuation", "start": 893, "end": 894},
		{"type": "keyword", "start": 896, "end": 902},
		{"type": "keyword", "start": 903, "end": 912},
		{"type": "class_name", "start": 913, "end": 919},
		{"type": "punctuation", "start": 920, "end": 921},
		{"type": "operator", "start": 927, "end": 928},
		{"type": "builtin", "start": 929, "end": 935},
		{"type": "punctuation", "start": 935, "end": 936},
		{"type": "operator", "start": 941, "end": 942},
		{"type": "builtin", "start": 943, "end": 949},
		{"type": "punctuation", "start": 949, "end": 950},
		{"type": "punctuation", "start": 951, "end": 952},
		{"type": "keyword", "start": 954, "end": 960},
		{"type": "keyword", "start": 961, "end": 966},
		{"type": "operator", "start": 973, "end": 974},
		{"type": "operator", "start": 982, "end": 983},
		{"type": "punctuation", "start": 984, "end": 985},
		{"type": "operator", "start": 989, "end": 990},
		{"type": "string", "start": 991, "end": 998},
		{"type": "punctuation", "start": 998, "end": 999},
		{"type": "operator", "start": 1003, "end": 1004},
		{"type": "number", "start": 1005, "end": 1008},
		{"type": "punctuation", "start": 1008, "end": 1009},
		{"type": "punctuation", "start": 1009, "end": 1010},
		{"type": "keyword", "start": 1012, "end": 1018},
		{"type": "keyword", "start": 1019, "end": 1027},
		{"type": "function", "start": 1028, "end": 1031},
		{"type": "punctuation", "start": 1031, "end": 1032},
		{"type": "operator", "start": 1033, "end": 1034},
		{"type": "builtin", "start": 1035, "end": 1041},
		{"type": "punctuation", "start": 1041, "end": 1042},
		{"type": "operator", "start": 1044, "end": 1045},
		{"type": "builtin", "start": 1046, "end": 1052},
		{"type": "punctuation", "start": 1052, "end": 1053},
		{"type": "operator", "start": 1053, "end": 1054},
		{"type": "builtin", "start": 1055, "end": 1061},
		{"type": "punctuation", "start": 1062, "end": 1063},
		{"type": "keyword", "start": 1065, "end": 1071},
		{"type": "operator", "start": 1074, "end": 1075},
		{"type": "punctuation", "start": 1077, "end": 1078},
		{"type": "punctuation", "start": 1079, "end": 1080},
		{"type": "keyword", "start": 1082, "end": 1088},
		{"type": "keyword", "start": 1089, "end": 1094},
		{"type": "operator", "start": 1100, "end": 1101},
		{"type": "punctuation", "start": 1102, "end": 1103},
		{"type": "operator", "start": 1104, "end": 1105},
		{"type": "builtin", "start": 1106, "end": 1109},
		{"type": "punctuation", "start": 1109, "end": 1110},
		{"type": "operator", "start": 1112, "end": 1113},
		{"type": "builtin", "start": 1114, "end": 1117},
		{"type": "punctuation", "start": 1117, "end": 1118},
		{"type": "operator", "start": 1118, "end": 1119},
		{"type": "builtin", "start": 1120, "end": 1123},
		{"type": "operator", "start": 1124, "end": 1126},
		{"type": "operator", "start": 1129, "end": 1130},
		{"type": "punctuation", "start": 1132, "end": 1133},
		{"type": "comment", "start": 1135, "end": 1157},
		{"type": "keyword", "start": 1158, "end": 1164},
		{"type": "keyword", "start": 1165, "end": 1170},
		{"type": "operator", "start": 1189, "end": 1190},
		{"type": "string", "start": 1191, "end": 1220},
		{"type": "punctuation", "start": 1220, "end": 1221},
		{"type": "keyword", "start": 1222, "end": 1228},
		{"type": "keyword", "start": 1229, "end": 1234},
		{"type": "operator", "start": 1252, "end": 1253},
		{"type": "string", "start": 1254, "end": 1280},
		{"type": "punctuation", "start": 1280, "end": 1281},
		{"type": "keyword", "start": 1282, "end": 1288},
		{"type": "keyword", "start": 1289, "end": 1294},
		{"type": "operator", "start": 1314, "end": 1315},
		{"type": "template_string", "start": 1316, "end": 1333},
		{"type": "template_punctuation", "start": 1316, "end": 1317},
		{"type": "string", "start": 1317, "end": 1324},
		{"type": "interpolation", "start": 1324, "end": 1332},
		{"type": "interpolation_punctuation", "start": 1324, "end": 1326},
		{"type": "number", "start": 1326, "end": 1327},
		{"type": "operator", "start": 1328, "end": 1329},
		{"type": "number", "start": 1330, "end": 1331},
		{"type": "interpolation_punctuation", "start": 1331, "end": 1332},
		{"type": "template_punctuation", "start": 1332, "end": 1333},
		{"type": "punctuation", "start": 1333, "end": 1334},
		{"type": "comment", "start": 1336, "end": 1368},
		{"type": "keyword", "start": 1369, "end": 1375},
		{"type": "keyword", "start": 1376, "end": 1381},
		{"type": "operator", "start": 1388, "end": 1389},
		{"type": "regex", "start": 1390, "end": 1399},
		{"type": "regex_delimiter", "start": 1390, "end": 1391},
		{"type": "regex_source", "start": 1391, "end": 1397},
		{"type": "regex_delimiter", "start": 1397, "end": 1398},
		{"type": "regex_flags", "start": 1398, "end": 1399},
		{"type": "punctuation", "start": 1399, "end": 1400},
		{"type": "keyword", "start": 1401, "end": 1407},
		{"type": "keyword", "start": 1408, "end": 1413},
		{"type": "operator", "start": 1428, "end": 1429},
		{"type": "regex", "start": 1430, "end": 1462},
		{"type": "regex_delimiter", "start": 1430, "end": 1431},
		{"type": "regex_source", "start": 1431, "end": 1461},
		{"type": "regex_delimiter", "start": 1461, "end": 1462},
		{"type": "punctuation", "start": 1462, "end": 1463},
		{"type": "comment", "start": 1465, "end": 1521},
		{"type": "comment", "start": 1522, "end": 1573}
	],
	"html": "<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class_name\">Some_Type</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class_name\"><span class=\"token constant\">D</span></span> <span class=\"token punctuation\">{</span>\n\td1<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">;</span>\n\td2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\td3 <span class=\"token operator\">=</span> <span class=\"token function\">$state</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>d2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d2 <span class=\"token operator\">=</span> d2<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">class_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token template_string\"><span class=\"token template_punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d1<span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token template_punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tinstance_method <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">/* ... */</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> c2 <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">#private_method</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">// foo</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">#private_method</span><span class=\"token punctuation\">(</span>a2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> c2<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class_name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template_string\"><span class=\"token template_punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d1<span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token string\"> \n\t\t\tmultiline\n\t\t\tetc </span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span>a2 <span class=\"token operator\">+</span> c2<span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token string\">\n\t\t</span><span class=\"token template_punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">protected</span> <span class=\"token function\">protected_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class_name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// eslint-disable-line no-console</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// comment</span>\n\n<span class=\"token comment\">/*\nother comment\n\nconst comment = false;\n*/</span>\n\n<span class=\"token comment\">/**\n * JSDoc comment\n */</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>sample_langs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">type</span> <span class=\"token class_name\">Code_Sample</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">type</span> <span class=\"token class_name\">Sample_Lang</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../code_sample.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">A</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../code_sample.js'</span><span class=\"token punctuation\">;</span>\n\nsample_langs <span class=\"token keyword\">as</span> <span class=\"token builtin\">unknown</span> <span class=\"token keyword\">as</span> Code_Sample <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span> <span class=\"token keyword\">as</span> Sample_Lang<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class_name\">Some_E</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\tage<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> some_e<span class=\"token operator\">:</span> Some_E <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'A. H.'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> plus <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// boundary test cases</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> str_with_keywords <span class=\"token operator\">=</span> <span class=\"token string\">'const class function string'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> str_with_comment <span class=\"token operator\">=</span> <span class=\"token string\">'// this is not a comment'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> template_with_expr <span class=\"token operator\">=</span> <span class=\"token template_string\"><span class=\"token template_punctuation string\">`</span><span class=\"token string\">Value: </span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token template_punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// regex that looks like comment</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex_delimiter\">/</span><span class=\"token regex_source lang_regex\">\\/\\/.*</span><span class=\"token regex_delimiter\">/</span><span class=\"token regex_flags\">g</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> complex_regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex_delimiter\">/</span><span class=\"token regex_source lang_regex\">^(?:\\/\\*.*?\\*\\/|\\/\\/.*|[^/])+$</span><span class=\"token regex_delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// string in comment should not be highlighted as string</span>\n<span class=\"token comment\">// const commented = \"this string is in a comment\";</span>\n"
}
