{
	"sample": {
		"lang": "ts",
		"variant": "complex",
		"content": "const a = 1;\n\nconst b = 'b';\n\nconst c = true;\n\nexport type Some_Type = 1 | 'b' | true;\n\nclass D {\n\td1: string = 'd';\n\td2: number;\n\td3 = $state(null);\n\n\tconstructor(d2: number) {\n\t\tthis.d2 = d2;\n\t}\n\n\tclass_method(): string {\n\t\treturn `Hello, ${this.d1}`;\n\t}\n\n\tinstance_method = (): void => {\n\t\t/* ... */\n\t\tlet i = 0;\n\t\twhile (i < 3) i++;\n\t\tfor (const c2 of this.d1) {\n\t\t\tif (c2 === 'd') continue;\n\t\t\tif (!c2) break;\n\t\t\tthis.#private_method(a, c2);\n\t\t}\n\t\t// foo\n\t};\n\n\t#private_method(a2: number, c2: any) {\n\t\tthrow new Error(`${this.d1} \n\t\t\tmultiline\n\t\t\tetc ${a2 + c2}\n\t\t`);\n\t}\n\n\tprotected async protected_method(): Promise<void> {\n\t\ttry {\n\t\t\tawait new Promise((resolve) => setTimeout(resolve, 100));\n\t\t\tif (Math.random() > 0.5) {\n\t\t\t\tconsole.log(new Date()); // eslint-disable-line no-console\n\t\t\t} else if (Math.random() > 0.2) {\n\t\t\t\tconsole.log('else if branch');\n\t\t\t} else {\n\t\t\t\tconsole.log('else branch');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t} finally {\n\t\t\tconsole.log('finally block');\n\t\t}\n\t}\n}\n\n// comment\n\n/*\nother comment\n\nconst comment = false;\n*/\n\n/**\n * JSDoc comment\n */\n\nimport {sample_langs, type Code_Sample, type Sample_Lang} from '../code_sample.js';\nimport * as A from '../code_sample.js';\n\nsample_langs as unknown as Code_Sample as any as Sample_Lang;\n\nexport {a, A, b, c, D};\n\nexport interface Some_E {\n\tname: string;\n\tage: number;\n}\n\nexport const some_e: Some_E = {name: 'A. H.', age: 100};\n\nexport function add(x: number, y: number): number {\n\treturn x + y;\n}\n\nexport const plus = (a: any, b: any): any => a + b;\n\n// boundary test cases\nexport const str_with_keywords = 'const class function string';\nexport const str_with_comment = '// this is not a comment';\nexport const template_with_expr = `Value: ${1 + 2}`;\n\n// regex that looks like comment\nexport const regex = /\\/\\/.*/g;\nexport const complex_regex = /^(?:\\/\\*.*?\\*\\/|\\/\\/.*|[^/])+$/;\n\n// string in comment should not be highlighted as string\n// const commented = \"this string is in a comment\";\n",
		"filepath": "src/lib/samples/sample_complex.ts"
	},
	"tokens": [
		{"type": "keyword", "start": 0, "end": 5},
		{"type": "operator", "start": 8, "end": 9},
		{"type": "number", "start": 10, "end": 11},
		{"type": "punctuation", "start": 11, "end": 12},
		{"type": "keyword", "start": 14, "end": 19},
		{"type": "operator", "start": 22, "end": 23},
		{"type": "string", "start": 24, "end": 27},
		{"type": "punctuation", "start": 27, "end": 28},
		{"type": "keyword", "start": 30, "end": 35},
		{"type": "operator", "start": 38, "end": 39},
		{"type": "boolean", "start": 40, "end": 44},
		{"type": "punctuation", "start": 44, "end": 45},
		{"type": "special_keyword", "start": 47, "end": 53},
		{"type": "keyword", "start": 54, "end": 58},
		{"type": "class_name", "start": 59, "end": 68},
		{"type": "operator", "start": 69, "end": 70},
		{"type": "number", "start": 71, "end": 72},
		{"type": "operator", "start": 73, "end": 74},
		{"type": "string", "start": 75, "end": 78},
		{"type": "operator", "start": 79, "end": 80},
		{"type": "boolean", "start": 81, "end": 85},
		{"type": "punctuation", "start": 85, "end": 86},
		{"type": "keyword", "start": 88, "end": 93},
		{"type": "class_name", "start": 94, "end": 95},
		{"type": "constant", "start": 94, "end": 95},
		{"type": "punctuation", "start": 96, "end": 97},
		{"type": "operator", "start": 101, "end": 102},
		{"type": "builtin", "start": 103, "end": 109},
		{"type": "operator", "start": 110, "end": 111},
		{"type": "string", "start": 112, "end": 115},
		{"type": "punctuation", "start": 115, "end": 116},
		{"type": "operator", "start": 120, "end": 121},
		{"type": "builtin", "start": 122, "end": 128},
		{"type": "punctuation", "start": 128, "end": 129},
		{"type": "operator", "start": 134, "end": 135},
		{"type": "function", "start": 136, "end": 142},
		{"type": "punctuation", "start": 142, "end": 143},
		{"type": "keyword", "start": 143, "end": 147},
		{"type": "punctuation", "start": 147, "end": 148},
		{"type": "punctuation", "start": 148, "end": 149},
		{"type": "function", "start": 152, "end": 163},
		{"type": "punctuation", "start": 163, "end": 164},
		{"type": "operator", "start": 166, "end": 167},
		{"type": "builtin", "start": 168, "end": 174},
		{"type": "punctuation", "start": 174, "end": 175},
		{"type": "punctuation", "start": 176, "end": 177},
		{"type": "keyword", "start": 180, "end": 184},
		{"type": "punctuation", "start": 184, "end": 185},
		{"type": "operator", "start": 188, "end": 189},
		{"type": "punctuation", "start": 192, "end": 193},
		{"type": "punctuation", "start": 195, "end": 196},
		{"type": "function", "start": 199, "end": 211},
		{"type": "punctuation", "start": 211, "end": 212},
		{"type": "punctuation", "start": 212, "end": 213},
		{"type": "operator", "start": 213, "end": 214},
		{"type": "builtin", "start": 215, "end": 221},
		{"type": "punctuation", "start": 222, "end": 223},
		{"type": "special_keyword", "start": 226, "end": 232},
		{"type": "template_string", "start": 233, "end": 252},
		{"type": "template_punctuation", "start": 233, "end": 234},
		{"type": "string", "start": 234, "end": 241},
		{"type": "interpolation", "start": 241, "end": 251},
		{"type": "interpolation_punctuation", "start": 241, "end": 243},
		{"type": "keyword", "start": 243, "end": 247},
		{"type": "punctuation", "start": 247, "end": 248},
		{"type": "interpolation_punctuation", "start": 250, "end": 251},
		{"type": "template_punctuation", "start": 251, "end": 252},
		{"type": "punctuation", "start": 252, "end": 253},
		{"type": "punctuation", "start": 255, "end": 256},
		{"type": "operator", "start": 275, "end": 276},
		{"type": "punctuation", "start": 277, "end": 278},
		{"type": "punctuation", "start": 278, "end": 279},
		{"type": "operator", "start": 279, "end": 280},
		{"type": "keyword", "start": 281, "end": 285},
		{"type": "operator", "start": 286, "end": 288},
		{"type": "punctuation", "start": 289, "end": 290},
		{"type": "comment", "start": 293, "end": 302},
		{"type": "keyword", "start": 305, "end": 308},
		{"type": "operator", "start": 311, "end": 312},
		{"type": "number", "start": 313, "end": 314},
		{"type": "punctuation", "start": 314, "end": 315},
		{"type": "special_keyword", "start": 318, "end": 323},
		{"type": "punctuation", "start": 324, "end": 325},
		{"type": "operator", "start": 327, "end": 328},
		{"type": "number", "start": 329, "end": 330},
		{"type": "punctuation", "start": 330, "end": 331},
		{"type": "operator", "start": 333, "end": 335},
		{"type": "punctuation", "start": 335, "end": 336},
		{"type": "special_keyword", "start": 339, "end": 342},
		{"type": "punctuation", "start": 343, "end": 344},
		{"type": "keyword", "start": 344, "end": 349},
		{"type": "keyword", "start": 353, "end": 355},
		{"type": "keyword", "start": 356, "end": 360},
		{"type": "punctuation", "start": 360, "end": 361},
		{"type": "punctuation", "start": 363, "end": 364},
		{"type": "punctuation", "start": 365, "end": 366},
		{"type": "special_keyword", "start": 370, "end": 372},
		{"type": "punctuation", "start": 373, "end": 374},
		{"type": "operator", "start": 377, "end": 380},
		{"type": "string", "start": 381, "end": 384},
		{"type": "punctuation", "start": 384, "end": 385},
		{"type": "special_keyword", "start": 386, "end": 394},
		{"type": "punctuation", "start": 394, "end": 395},
		{"type": "special_keyword", "start": 399, "end": 401},
		{"type": "punctuation", "start": 402, "end": 403},
		{"type": "operator", "start": 403, "end": 404},
		{"type": "punctuation", "start": 406, "end": 407},
		{"type": "special_keyword", "start": 408, "end": 413},
		{"type": "punctuation", "start": 413, "end": 414},
		{"type": "keyword", "start": 418, "end": 422},
		{"type": "punctuation", "start": 422, "end": 423},
		{"type": "function", "start": 423, "end": 438},
		{"type": "punctuation", "start": 438, "end": 439},
		{"type": "punctuation", "start": 440, "end": 441},
		{"type": "punctuation", "start": 444, "end": 445},
		{"type": "punctuation", "start": 445, "end": 446},
		{"type": "punctuation", "start": 449, "end": 450},
		{"type": "comment", "start": 453, "end": 459},
		{"type": "punctuation", "start": 461, "end": 462},
		{"type": "punctuation", "start": 462, "end": 463},
		{"type": "function", "start": 466, "end": 481},
		{"type": "punctuation", "start": 481, "end": 482},
		{"type": "operator", "start": 484, "end": 485},
		{"type": "builtin", "start": 486, "end": 492},
		{"type": "punctuation", "start": 492, "end": 493},
		{"type": "operator", "start": 496, "end": 497},
		{"type": "builtin", "start": 498, "end": 501},
		{"type": "punctuation", "start": 501, "end": 502},
		{"type": "punctuation", "start": 503, "end": 504},
		{"type": "special_keyword", "start": 507, "end": 512},
		{"type": "keyword", "start": 513, "end": 516},
		{"type": "class_name", "start": 517, "end": 522},
		{"type": "punctuation", "start": 522, "end": 523},
		{"type": "template_string", "start": 523, "end": 570},
		{"type": "template_punctuation", "start": 523, "end": 524},
		{"type": "interpolation", "start": 524, "end": 534},
		{"type": "interpolation_punctuation", "start": 524, "end": 526},
		{"type": "keyword", "start": 526, "end": 530},
		{"type": "punctuation", "start": 530, "end": 531},
		{"type": "interpolation_punctuation", "start": 533, "end": 534},
		{"type": "string", "start": 534, "end": 556},
		{"type": "interpolation", "start": 556, "end": 566},
		{"type": "interpolation_punctuation", "start": 556, "end": 558},
		{"type": "operator", "start": 561, "end": 562},
		{"type": "interpolation_punctuation", "start": 565, "end": 566},
		{"type": "string", "start": 566, "end": 569},
		{"type": "template_punctuation", "start": 569, "end": 570},
		{"type": "punctuation", "start": 570, "end": 571},
		{"type": "punctuation", "start": 571, "end": 572},
		{"type": "punctuation", "start": 574, "end": 575},
		{"type": "keyword", "start": 578, "end": 587},
		{"type": "keyword", "start": 588, "end": 593},
		{"type": "function", "start": 594, "end": 610},
		{"type": "punctuation", "start": 610, "end": 611},
		{"type": "punctuation", "start": 611, "end": 612},
		{"type": "operator", "start": 612, "end": 613},
		{"type": "builtin", "start": 614, "end": 621},
		{"type": "operator", "start": 621, "end": 622},
		{"type": "keyword", "start": 622, "end": 626},
		{"type": "operator", "start": 626, "end": 627},
		{"type": "punctuation", "start": 628, "end": 629},
		{"type": "special_keyword", "start": 632, "end": 635},
		{"type": "punctuation", "start": 636, "end": 637},
		{"type": "special_keyword", "start": 641, "end": 646},
		{"type": "keyword", "start": 647, "end": 650},
		{"type": "class_name", "start": 651, "end": 658},
		{"type": "builtin", "start": 651, "end": 658},
		{"type": "punctuation", "start": 658, "end": 659},
		{"type": "punctuation", "start": 659, "end": 660},
		{"type": "punctuation", "start": 667, "end": 668},
		{"type": "operator", "start": 669, "end": 671},
		{"type": "function", "start": 672, "end": 682},
		{"type": "punctuation", "start": 682, "end": 683},
		{"type": "punctuation", "start": 690, "end": 691},
		{"type": "number", "start": 692, "end": 695},
		{"type": "punctuation", "start": 695, "end": 696},
		{"type": "punctuation", "start": 696, "end": 697},
		{"type": "punctuation", "start": 697, "end": 698},
		{"type": "special_keyword", "start": 702, "end": 704},
		{"type": "punctuation", "start": 705, "end": 706},
		{"type": "punctuation", "start": 710, "end": 711},
		{"type": "function", "start": 711, "end": 717},
		{"type": "punctuation", "start": 717, "end": 718},
		{"type": "punctuation", "start": 718, "end": 719},
		{"type": "operator", "start": 720, "end": 721},
		{"type": "number", "start": 722, "end": 725},
		{"type": "punctuation", "start": 725, "end": 726},
		{"type": "punctuation", "start": 727, "end": 728},
		{"type": "builtin", "start": 733, "end": 740},
		{"type": "punctuation", "start": 740, "end": 741},
		{"type": "function", "start": 741, "end": 744},
		{"type": "punctuation", "start": 744, "end": 745},
		{"type": "keyword", "start": 745, "end": 748},
		{"type": "class_name", "start": 749, "end": 753},
		{"type": "punctuation", "start": 753, "end": 754},
		{"type": "punctuation", "start": 754, "end": 755},
		{"type": "punctuation", "start": 755, "end": 756},
		{"type": "punctuation", "start": 756, "end": 757},
		{"type": "comment", "start": 758, "end": 791},
		{"type": "punctuation", "start": 795, "end": 796},
		{"type": "special_keyword", "start": 797, "end": 801},
		{"type": "special_keyword", "start": 802, "end": 804},
		{"type": "punctuation", "start": 805, "end": 806},
		{"type": "punctuation", "start": 810, "end": 811},
		{"type": "function", "start": 811, "end": 817},
		{"type": "punctuation", "start": 817, "end": 818},
		{"type": "punctuation", "start": 818, "end": 819},
		{"type": "operator", "start": 820, "end": 821},
		{"type": "number", "start": 822, "end": 825},
		{"type": "punctuation", "start": 825, "end": 826},
		{"type": "punctuation", "start": 827, "end": 828},
		{"type": "builtin", "start": 833, "end": 840},
		{"type": "punctuation", "start": 840, "end": 841},
		{"type": "function", "start": 841, "end": 844},
		{"type": "punctuation", "start": 844, "end": 845},
		{"type": "string", "start": 845, "end": 861},
		{"type": "punctuation", "start": 861, "end": 862},
		{"type": "punctuation", "start": 862, "end": 863},
		{"type": "punctuation", "start": 867, "end": 868},
		{"type": "special_keyword", "start": 869, "end": 873},
		{"type": "punctuation", "start": 874, "end": 875},
		{"type": "builtin", "start": 880, "end": 887},
		{"type": "punctuation", "start": 887, "end": 888},
		{"type": "function", "start": 888, "end": 891},
		{"type": "punctuation", "start": 891, "end": 892},
		{"type": "string", "start": 892, "end": 905},
		{"type": "punctuation", "start": 905, "end": 906},
		{"type": "punctuation", "start": 906, "end": 907},
		{"type": "punctuation", "start": 911, "end": 912},
		{"type": "punctuation", "start": 915, "end": 916},
		{"type": "special_keyword", "start": 917, "end": 922},
		{"type": "punctuation", "start": 923, "end": 924},
		{"type": "punctuation", "start": 929, "end": 930},
		{"type": "punctuation", "start": 931, "end": 932},
		{"type": "builtin", "start": 936, "end": 943},
		{"type": "punctuation", "start": 943, "end": 944},
		{"type": "function", "start": 944, "end": 949},
		{"type": "punctuation", "start": 949, "end": 950},
		{"type": "punctuation", "start": 955, "end": 956},
		{"type": "punctuation", "start": 956, "end": 957},
		{"type": "punctuation", "start": 960, "end": 961},
		{"type": "special_keyword", "start": 962, "end": 969},
		{"type": "punctuation", "start": 970, "end": 971},
		{"type": "builtin", "start": 975, "end": 982},
		{"type": "punctuation", "start": 982, "end": 983},
		{"type": "function", "start": 983, "end": 986},
		{"type": "punctuation", "start": 986, "end": 987},
		{"type": "string", "start": 987, "end": 1002},
		{"type": "punctuation", "start": 1002, "end": 1003},
		{"type": "punctuation", "start": 1003, "end": 1004},
		{"type": "punctuation", "start": 1007, "end": 1008},
		{"type": "punctuation", "start": 1010, "end": 1011},
		{"type": "punctuation", "start": 1012, "end": 1013},
		{"type": "comment", "start": 1015, "end": 1025},
		{"type": "comment", "start": 1027, "end": 1070},
		{"type": "comment", "start": 1072, "end": 1096},
		{"type": "special_keyword", "start": 1098, "end": 1104},
		{"type": "punctuation", "start": 1105, "end": 1106},
		{"type": "punctuation", "start": 1118, "end": 1119},
		{"type": "keyword", "start": 1120, "end": 1124},
		{"type": "class_name", "start": 1125, "end": 1136},
		{"type": "punctuation", "start": 1136, "end": 1137},
		{"type": "keyword", "start": 1138, "end": 1142},
		{"type": "class_name", "start": 1143, "end": 1154},
		{"type": "punctuation", "start": 1154, "end": 1155},
		{"type": "special_keyword", "start": 1156, "end": 1160},
		{"type": "string", "start": 1161, "end": 1180},
		{"type": "punctuation", "start": 1180, "end": 1181},
		{"type": "special_keyword", "start": 1182, "end": 1188},
		{"type": "operator", "start": 1189, "end": 1190},
		{"type": "special_keyword", "start": 1191, "end": 1193},
		{"type": "constant", "start": 1194, "end": 1195},
		{"type": "special_keyword", "start": 1196, "end": 1200},
		{"type": "string", "start": 1201, "end": 1220},
		{"type": "punctuation", "start": 1220, "end": 1221},
		{"type": "special_keyword", "start": 1236, "end": 1238},
		{"type": "builtin", "start": 1239, "end": 1246},
		{"type": "special_keyword", "start": 1247, "end": 1249},
		{"type": "special_keyword", "start": 1262, "end": 1264},
		{"type": "builtin", "start": 1265, "end": 1268},
		{"type": "special_keyword", "start": 1269, "end": 1271},
		{"type": "punctuation", "start": 1283, "end": 1284},
		{"type": "special_keyword", "start": 1286, "end": 1292},
		{"type": "punctuation", "start": 1293, "end": 1294},
		{"type": "punctuation", "start": 1295, "end": 1296},
		{"type": "constant", "start": 1297, "end": 1298},
		{"type": "punctuation", "start": 1298, "end": 1299},
		{"type": "punctuation", "start": 1301, "end": 1302},
		{"type": "punctuation", "start": 1304, "end": 1305},
		{"type": "constant", "start": 1306, "end": 1307},
		{"type": "punctuation", "start": 1307, "end": 1308},
		{"type": "punctuation", "start": 1308, "end": 1309},
		{"type": "special_keyword", "start": 1311, "end": 1317},
		{"type": "keyword", "start": 1318, "end": 1327},
		{"type": "class_name", "start": 1328, "end": 1334},
		{"type": "punctuation", "start": 1335, "end": 1336},
		{"type": "operator", "start": 1342, "end": 1343},
		{"type": "builtin", "start": 1344, "end": 1350},
		{"type": "punctuation", "start": 1350, "end": 1351},
		{"type": "operator", "start": 1356, "end": 1357},
		{"type": "builtin", "start": 1358, "end": 1364},
		{"type": "punctuation", "start": 1364, "end": 1365},
		{"type": "punctuation", "start": 1366, "end": 1367},
		{"type": "special_keyword", "start": 1369, "end": 1375},
		{"type": "keyword", "start": 1376, "end": 1381},
		{"type": "operator", "start": 1388, "end": 1389},
		{"type": "operator", "start": 1397, "end": 1398},
		{"type": "punctuation", "start": 1399, "end": 1400},
		{"type": "operator", "start": 1404, "end": 1405},
		{"type": "string", "start": 1406, "end": 1413},
		{"type": "punctuation", "start": 1413, "end": 1414},
		{"type": "operator", "start": 1418, "end": 1419},
		{"type": "number", "start": 1420, "end": 1423},
		{"type": "punctuation", "start": 1423, "end": 1424},
		{"type": "punctuation", "start": 1424, "end": 1425},
		{"type": "special_keyword", "start": 1427, "end": 1433},
		{"type": "keyword", "start": 1434, "end": 1442},
		{"type": "function", "start": 1443, "end": 1446},
		{"type": "punctuation", "start": 1446, "end": 1447},
		{"type": "operator", "start": 1448, "end": 1449},
		{"type": "builtin", "start": 1450, "end": 1456},
		{"type": "punctuation", "start": 1456, "end": 1457},
		{"type": "operator", "start": 1459, "end": 1460},
		{"type": "builtin", "start": 1461, "end": 1467},
		{"type": "punctuation", "start": 1467, "end": 1468},
		{"type": "operator", "start": 1468, "end": 1469},
		{"type": "builtin", "start": 1470, "end": 1476},
		{"type": "punctuation", "start": 1477, "end": 1478},
		{"type": "special_keyword", "start": 1480, "end": 1486},
		{"type": "operator", "start": 1489, "end": 1490},
		{"type": "punctuation", "start": 1492, "end": 1493},
		{"type": "punctuation", "start": 1494, "end": 1495},
		{"type": "special_keyword", "start": 1497, "end": 1503},
		{"type": "keyword", "start": 1504, "end": 1509},
		{"type": "operator", "start": 1515, "end": 1516},
		{"type": "punctuation", "start": 1517, "end": 1518},
		{"type": "operator", "start": 1519, "end": 1520},
		{"type": "builtin", "start": 1521, "end": 1524},
		{"type": "punctuation", "start": 1524, "end": 1525},
		{"type": "operator", "start": 1527, "end": 1528},
		{"type": "builtin", "start": 1529, "end": 1532},
		{"type": "punctuation", "start": 1532, "end": 1533},
		{"type": "operator", "start": 1533, "end": 1534},
		{"type": "builtin", "start": 1535, "end": 1538},
		{"type": "operator", "start": 1539, "end": 1541},
		{"type": "operator", "start": 1544, "end": 1545},
		{"type": "punctuation", "start": 1547, "end": 1548},
		{"type": "comment", "start": 1550, "end": 1572},
		{"type": "special_keyword", "start": 1573, "end": 1579},
		{"type": "keyword", "start": 1580, "end": 1585},
		{"type": "operator", "start": 1604, "end": 1605},
		{"type": "string", "start": 1606, "end": 1635},
		{"type": "punctuation", "start": 1635, "end": 1636},
		{"type": "special_keyword", "start": 1637, "end": 1643},
		{"type": "keyword", "start": 1644, "end": 1649},
		{"type": "operator", "start": 1667, "end": 1668},
		{"type": "string", "start": 1669, "end": 1695},
		{"type": "punctuation", "start": 1695, "end": 1696},
		{"type": "special_keyword", "start": 1697, "end": 1703},
		{"type": "keyword", "start": 1704, "end": 1709},
		{"type": "operator", "start": 1729, "end": 1730},
		{"type": "template_string", "start": 1731, "end": 1748},
		{"type": "template_punctuation", "start": 1731, "end": 1732},
		{"type": "string", "start": 1732, "end": 1739},
		{"type": "interpolation", "start": 1739, "end": 1747},
		{"type": "interpolation_punctuation", "start": 1739, "end": 1741},
		{"type": "number", "start": 1741, "end": 1742},
		{"type": "operator", "start": 1743, "end": 1744},
		{"type": "number", "start": 1745, "end": 1746},
		{"type": "interpolation_punctuation", "start": 1746, "end": 1747},
		{"type": "template_punctuation", "start": 1747, "end": 1748},
		{"type": "punctuation", "start": 1748, "end": 1749},
		{"type": "comment", "start": 1751, "end": 1783},
		{"type": "special_keyword", "start": 1784, "end": 1790},
		{"type": "keyword", "start": 1791, "end": 1796},
		{"type": "operator", "start": 1803, "end": 1804},
		{"type": "regex", "start": 1805, "end": 1814},
		{"type": "regex_delimiter", "start": 1805, "end": 1806},
		{"type": "regex_source", "start": 1806, "end": 1812},
		{"type": "regex_delimiter", "start": 1812, "end": 1813},
		{"type": "regex_flags", "start": 1813, "end": 1814},
		{"type": "punctuation", "start": 1814, "end": 1815},
		{"type": "special_keyword", "start": 1816, "end": 1822},
		{"type": "keyword", "start": 1823, "end": 1828},
		{"type": "operator", "start": 1843, "end": 1844},
		{"type": "regex", "start": 1845, "end": 1877},
		{"type": "regex_delimiter", "start": 1845, "end": 1846},
		{"type": "regex_source", "start": 1846, "end": 1876},
		{"type": "regex_delimiter", "start": 1876, "end": 1877},
		{"type": "punctuation", "start": 1877, "end": 1878},
		{"type": "comment", "start": 1880, "end": 1936},
		{"type": "comment", "start": 1937, "end": 1988}
	],
	"html": "<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class_name\">Some_Type</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class_name\"><span class=\"token constant\">D</span></span> <span class=\"token punctuation\">{</span>\n\td1<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">;</span>\n\td2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\td3 <span class=\"token operator\">=</span> <span class=\"token function\">$state</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>d2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d2 <span class=\"token operator\">=</span> d2<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">class_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token special_keyword\">return</span> <span class=\"token template_string\"><span class=\"token template_punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d1<span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token template_punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tinstance_method <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">/* ... */</span>\n\t\t<span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token special_keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token special_keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> c2 <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token special_keyword\">if</span> <span class=\"token punctuation\">(</span>c2 <span class=\"token operator\">===</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">)</span> <span class=\"token special_keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token special_keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>c2<span class=\"token punctuation\">)</span> <span class=\"token special_keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">#private_method</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">// foo</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">#private_method</span><span class=\"token punctuation\">(</span>a2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> c2<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token special_keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class_name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template_string\"><span class=\"token template_punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d1<span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token string\"> \n\t\t\tmultiline\n\t\t\tetc </span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span>a2 <span class=\"token operator\">+</span> c2<span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token string\">\n\t\t</span><span class=\"token template_punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">async</span> <span class=\"token function\">protected_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token special_keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token special_keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class_name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token special_keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class_name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// eslint-disable-line no-console</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token special_keyword\">else</span> <span class=\"token special_keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'else if branch'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token special_keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'else branch'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token special_keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token special_keyword\">finally</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'finally block'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// comment</span>\n\n<span class=\"token comment\">/*\nother comment\n\nconst comment = false;\n*/</span>\n\n<span class=\"token comment\">/**\n * JSDoc comment\n */</span>\n\n<span class=\"token special_keyword\">import</span> <span class=\"token punctuation\">{</span>sample_langs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">type</span> <span class=\"token class_name\">Code_Sample</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">type</span> <span class=\"token class_name\">Sample_Lang</span><span class=\"token punctuation\">}</span> <span class=\"token special_keyword\">from</span> <span class=\"token string\">'../code_sample.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token special_keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token special_keyword\">as</span> <span class=\"token constant\">A</span> <span class=\"token special_keyword\">from</span> <span class=\"token string\">'../code_sample.js'</span><span class=\"token punctuation\">;</span>\n\nsample_langs <span class=\"token special_keyword\">as</span> <span class=\"token builtin\">unknown</span> <span class=\"token special_keyword\">as</span> Code_Sample <span class=\"token special_keyword\">as</span> <span class=\"token builtin\">any</span> <span class=\"token special_keyword\">as</span> Sample_Lang<span class=\"token punctuation\">;</span>\n\n<span class=\"token special_keyword\">export</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class_name\">Some_E</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\tage<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">const</span> some_e<span class=\"token operator\">:</span> Some_E <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'A. H.'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token special_keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">const</span> plus <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// boundary test cases</span>\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">const</span> str_with_keywords <span class=\"token operator\">=</span> <span class=\"token string\">'const class function string'</span><span class=\"token punctuation\">;</span>\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">const</span> str_with_comment <span class=\"token operator\">=</span> <span class=\"token string\">'// this is not a comment'</span><span class=\"token punctuation\">;</span>\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">const</span> template_with_expr <span class=\"token operator\">=</span> <span class=\"token template_string\"><span class=\"token template_punctuation string\">`</span><span class=\"token string\">Value: </span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token template_punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// regex that looks like comment</span>\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">const</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex_delimiter\">/</span><span class=\"token regex_source lang_regex\">\\/\\/.*</span><span class=\"token regex_delimiter\">/</span><span class=\"token regex_flags\">g</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">const</span> complex_regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex_delimiter\">/</span><span class=\"token regex_source lang_regex\">^(?:\\/\\*.*?\\*\\/|\\/\\/.*|[^/])+$</span><span class=\"token regex_delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// string in comment should not be highlighted as string</span>\n<span class=\"token comment\">// const commented = \"this string is in a comment\";</span>\n"
}
