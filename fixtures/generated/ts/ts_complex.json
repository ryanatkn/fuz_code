{
	"sample": {
		"lang": "ts",
		"variant": "complex",
		"content": "const a = 1;\n\nconst b = 'b';\n\nconst c = true;\n\nexport type Some_Type = 1 | 'b' | true;\n\ndeclare const class_decorator: any, property_decorator: any, method_decorator: any;\n\nabstract class Base {\n\tabstract abstract_method(): void;\n}\n\n@class_decorator\nclass D extends Base {\n\treadonly d1: string = 'd';\n\td2: number;\n\td3 = $state(null);\n\n\t@property_decorator\n\tdecorated = true;\n\n\tconstructor(d2: number) {\n\t\tsuper();\n\t\tthis.d2 = d2;\n\t}\n\n\tabstract_method(): void {\n\t\t// implementation\n\t}\n\n\t@method_decorator('example', {option: true})\n\tclass_method(): string {\n\t\treturn `Hello, ${this.d1}`;\n\t}\n\n\tinstance_method = (): void => {\n\t\t/* ... */\n\t\tlet i = 0;\n\t\tdo {\n\t\t\ti++;\n\t\t} while (i < 3);\n\n\t\tfor (const c2 of this.d1) {\n\t\t\tif (c2 === 'd') continue;\n\t\t\tif (!c2) break;\n\t\t\tthis.#private_method(a, c2);\n\t\t}\n\n\t\tswitch (this.d1) {\n\t\t\tcase 'a':\n\t\t\t\tconsole.log('case a');\n\t\t\t\tbreak;\n\t\t\tcase 'b':\n\t\t\tcase 'c':\n\t\t\t\tconsole.log('case b or c');\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log('default');\n\t\t}\n\n\t\tconst obj: {has_d1?: boolean; is_d: boolean} = {\n\t\t\thas_d1: 'd1' in this,\n\t\t\tis_d: this instanceof D,\n\t\t};\n\t\tdelete obj.has_d1;\n\t\t// foo\n\t};\n\n\t#private_method(a2: number, c2: any) {\n\t\tthrow new Error(`${this.d1}\n\t\t\tmultiline\n\t\t\tetc ${a2 + c2}\n\t\t`);\n\t}\n\n\t*generator() {\n\t\tyield 1;\n\t\tyield* [2, 3];\n\t}\n\n\tasync *async_generator() {\n\t\tyield await Promise.resolve(4);\n\t}\n\n\tprotected async protected_method(): Promise<void> {\n\t\ttry {\n\t\t\tawait new Promise((resolve) => setTimeout(resolve, 100));\n\t\t\tif (Math.random() > 0.5) {\n\t\t\t\tconsole.log(new Date()); // eslint-disable-line no-console\n\t\t\t} else if (Math.random() > 0.2) {\n\t\t\t\tconsole.log('else if branch');\n\t\t\t} else {\n\t\t\t\tconsole.log('else branch');\n\t\t\t}\n\t\t} catch (error: unknown) {\n\t\t\tconsole.error(error);\n\t\t} finally {\n\t\t\tconsole.log('finally block');\n\t\t}\n\t}\n}\n\n// comment\n\n/*\nother comment\n\nconst comment = false;\n*/\n\n/**\n * JSDoc comment\n */\n\nimport {sample_langs, type Sample_Lang} from '../code_sample.js';\nimport * as A from '../code_sample.js';\n\nexport {a, A, b, c, D};\n\nsample_langs as unknown as any as Sample_Lang satisfies Sample_Lang;\n\nexport interface Some_E {\n\tname: string;\n\tage: number;\n}\n\nexport const some_e: Some_E = {name: 'A. H.', age: 100};\n\nexport function add(x: number, y: number): number {\n\treturn x + y;\n}\n\nexport const plus = (a: any, b: any): any => a + b;\n\n// boundary test cases\nexport const str_with_keywords = 'const class function string';\nexport const str_with_comment = '// this is not a comment';\nexport const template_with_expr = `Value: ${1 + 2}`;\n\n// regex that looks like comment\nexport const regex = /\\/\\/.*/g;\nexport const complex_regex = /^(?:\\/\\*.*?\\*\\/|\\/\\/.*|[^/])+$/;\n\n// string in comment should not be highlighted as string\n// const commented = \"this string is in a comment\";\n",
		"filepath": "src/lib/samples/sample_complex.ts"
	},
	"tokens": [
		{"type": "keyword", "start": 0, "end": 5},
		{"type": "operator", "start": 8, "end": 9},
		{"type": "number", "start": 10, "end": 11},
		{"type": "punctuation", "start": 11, "end": 12},
		{"type": "keyword", "start": 14, "end": 19},
		{"type": "operator", "start": 22, "end": 23},
		{"type": "string", "start": 24, "end": 27},
		{"type": "punctuation", "start": 27, "end": 28},
		{"type": "keyword", "start": 30, "end": 35},
		{"type": "operator", "start": 38, "end": 39},
		{"type": "boolean", "start": 40, "end": 44},
		{"type": "punctuation", "start": 44, "end": 45},
		{"type": "special_keyword", "start": 47, "end": 53},
		{"type": "keyword", "start": 54, "end": 58},
		{"type": "class_name", "start": 59, "end": 68},
		{"type": "operator", "start": 69, "end": 70},
		{"type": "number", "start": 71, "end": 72},
		{"type": "operator", "start": 73, "end": 74},
		{"type": "string", "start": 75, "end": 78},
		{"type": "operator", "start": 79, "end": 80},
		{"type": "boolean", "start": 81, "end": 85},
		{"type": "punctuation", "start": 85, "end": 86},
		{"type": "keyword", "start": 88, "end": 95},
		{"type": "keyword", "start": 96, "end": 101},
		{"type": "operator", "start": 117, "end": 118},
		{"type": "builtin", "start": 119, "end": 122},
		{"type": "punctuation", "start": 122, "end": 123},
		{"type": "operator", "start": 142, "end": 143},
		{"type": "builtin", "start": 144, "end": 147},
		{"type": "punctuation", "start": 147, "end": 148},
		{"type": "operator", "start": 165, "end": 166},
		{"type": "builtin", "start": 167, "end": 170},
		{"type": "punctuation", "start": 170, "end": 171},
		{"type": "keyword", "start": 173, "end": 181},
		{"type": "keyword", "start": 182, "end": 187},
		{"type": "class_name", "start": 188, "end": 192},
		{"type": "punctuation", "start": 193, "end": 194},
		{"type": "keyword", "start": 196, "end": 204},
		{"type": "function", "start": 205, "end": 220},
		{"type": "punctuation", "start": 220, "end": 221},
		{"type": "punctuation", "start": 221, "end": 222},
		{"type": "operator", "start": 222, "end": 223},
		{"type": "keyword", "start": 224, "end": 228},
		{"type": "punctuation", "start": 228, "end": 229},
		{"type": "punctuation", "start": 230, "end": 231},
		{"type": "decorator", "start": 233, "end": 249},
		{"type": "at", "start": 233, "end": 234},
		{"type": "function", "start": 234, "end": 249},
		{"type": "keyword", "start": 250, "end": 255},
		{"type": "class_name", "start": 256, "end": 257},
		{"type": "constant", "start": 256, "end": 257},
		{"type": "keyword", "start": 258, "end": 265},
		{"type": "class_name", "start": 266, "end": 270},
		{"type": "punctuation", "start": 271, "end": 272},
		{"type": "keyword", "start": 274, "end": 282},
		{"type": "operator", "start": 285, "end": 286},
		{"type": "builtin", "start": 287, "end": 293},
		{"type": "operator", "start": 294, "end": 295},
		{"type": "string", "start": 296, "end": 299},
		{"type": "punctuation", "start": 299, "end": 300},
		{"type": "operator", "start": 304, "end": 305},
		{"type": "builtin", "start": 306, "end": 312},
		{"type": "punctuation", "start": 312, "end": 313},
		{"type": "operator", "start": 318, "end": 319},
		{"type": "function", "start": 320, "end": 326},
		{"type": "punctuation", "start": 326, "end": 327},
		{"type": "keyword", "start": 327, "end": 331},
		{"type": "punctuation", "start": 331, "end": 332},
		{"type": "punctuation", "start": 332, "end": 333},
		{"type": "decorator", "start": 336, "end": 355},
		{"type": "at", "start": 336, "end": 337},
		{"type": "function", "start": 337, "end": 355},
		{"type": "operator", "start": 367, "end": 368},
		{"type": "boolean", "start": 369, "end": 373},
		{"type": "punctuation", "start": 373, "end": 374},
		{"type": "function", "start": 377, "end": 388},
		{"type": "punctuation", "start": 388, "end": 389},
		{"type": "operator", "start": 391, "end": 392},
		{"type": "builtin", "start": 393, "end": 399},
		{"type": "punctuation", "start": 399, "end": 400},
		{"type": "punctuation", "start": 401, "end": 402},
		{"type": "keyword", "start": 405, "end": 410},
		{"type": "punctuation", "start": 410, "end": 411},
		{"type": "punctuation", "start": 411, "end": 412},
		{"type": "punctuation", "start": 412, "end": 413},
		{"type": "keyword", "start": 416, "end": 420},
		{"type": "punctuation", "start": 420, "end": 421},
		{"type": "operator", "start": 424, "end": 425},
		{"type": "punctuation", "start": 428, "end": 429},
		{"type": "punctuation", "start": 431, "end": 432},
		{"type": "function", "start": 435, "end": 450},
		{"type": "punctuation", "start": 450, "end": 451},
		{"type": "punctuation", "start": 451, "end": 452},
		{"type": "operator", "start": 452, "end": 453},
		{"type": "keyword", "start": 454, "end": 458},
		{"type": "punctuation", "start": 459, "end": 460},
		{"type": "comment", "start": 463, "end": 480},
		{"type": "punctuation", "start": 482, "end": 483},
		{"type": "decorator", "start": 486, "end": 503},
		{"type": "at", "start": 486, "end": 487},
		{"type": "function", "start": 487, "end": 503},
		{"type": "punctuation", "start": 503, "end": 504},
		{"type": "string", "start": 504, "end": 513},
		{"type": "punctuation", "start": 513, "end": 514},
		{"type": "punctuation", "start": 515, "end": 516},
		{"type": "operator", "start": 522, "end": 523},
		{"type": "boolean", "start": 524, "end": 528},
		{"type": "punctuation", "start": 528, "end": 529},
		{"type": "punctuation", "start": 529, "end": 530},
		{"type": "function", "start": 532, "end": 544},
		{"type": "punctuation", "start": 544, "end": 545},
		{"type": "punctuation", "start": 545, "end": 546},
		{"type": "operator", "start": 546, "end": 547},
		{"type": "builtin", "start": 548, "end": 554},
		{"type": "punctuation", "start": 555, "end": 556},
		{"type": "special_keyword", "start": 559, "end": 565},
		{"type": "template_string", "start": 566, "end": 585},
		{"type": "template_punctuation", "start": 566, "end": 567},
		{"type": "string", "start": 567, "end": 574},
		{"type": "interpolation", "start": 574, "end": 584},
		{"type": "interpolation_punctuation", "start": 574, "end": 576},
		{"type": "keyword", "start": 576, "end": 580},
		{"type": "punctuation", "start": 580, "end": 581},
		{"type": "interpolation_punctuation", "start": 583, "end": 584},
		{"type": "template_punctuation", "start": 584, "end": 585},
		{"type": "punctuation", "start": 585, "end": 586},
		{"type": "punctuation", "start": 588, "end": 589},
		{"type": "function_variable", "start": 592, "end": 607},
		{"type": "operator", "start": 608, "end": 609},
		{"type": "punctuation", "start": 610, "end": 611},
		{"type": "punctuation", "start": 611, "end": 612},
		{"type": "operator", "start": 612, "end": 613},
		{"type": "keyword", "start": 614, "end": 618},
		{"type": "operator", "start": 619, "end": 621},
		{"type": "punctuation", "start": 622, "end": 623},
		{"type": "comment", "start": 626, "end": 635},
		{"type": "keyword", "start": 638, "end": 641},
		{"type": "operator", "start": 644, "end": 645},
		{"type": "number", "start": 646, "end": 647},
		{"type": "punctuation", "start": 647, "end": 648},
		{"type": "special_keyword", "start": 651, "end": 653},
		{"type": "punctuation", "start": 654, "end": 655},
		{"type": "operator", "start": 660, "end": 662},
		{"type": "punctuation", "start": 662, "end": 663},
		{"type": "punctuation", "start": 666, "end": 667},
		{"type": "special_keyword", "start": 668, "end": 673},
		{"type": "punctuation", "start": 674, "end": 675},
		{"type": "operator", "start": 677, "end": 678},
		{"type": "number", "start": 679, "end": 680},
		{"type": "punctuation", "start": 680, "end": 681},
		{"type": "punctuation", "start": 681, "end": 682},
		{"type": "special_keyword", "start": 686, "end": 689},
		{"type": "punctuation", "start": 690, "end": 691},
		{"type": "keyword", "start": 691, "end": 696},
		{"type": "keyword", "start": 700, "end": 702},
		{"type": "keyword", "start": 703, "end": 707},
		{"type": "punctuation", "start": 707, "end": 708},
		{"type": "punctuation", "start": 710, "end": 711},
		{"type": "punctuation", "start": 712, "end": 713},
		{"type": "special_keyword", "start": 717, "end": 719},
		{"type": "punctuation", "start": 720, "end": 721},
		{"type": "operator", "start": 724, "end": 727},
		{"type": "string", "start": 728, "end": 731},
		{"type": "punctuation", "start": 731, "end": 732},
		{"type": "special_keyword", "start": 733, "end": 741},
		{"type": "punctuation", "start": 741, "end": 742},
		{"type": "special_keyword", "start": 746, "end": 748},
		{"type": "punctuation", "start": 749, "end": 750},
		{"type": "operator", "start": 750, "end": 751},
		{"type": "punctuation", "start": 753, "end": 754},
		{"type": "special_keyword", "start": 755, "end": 760},
		{"type": "punctuation", "start": 760, "end": 761},
		{"type": "keyword", "start": 765, "end": 769},
		{"type": "punctuation", "start": 769, "end": 770},
		{"type": "function", "start": 770, "end": 785},
		{"type": "punctuation", "start": 785, "end": 786},
		{"type": "punctuation", "start": 787, "end": 788},
		{"type": "punctuation", "start": 791, "end": 792},
		{"type": "punctuation", "start": 792, "end": 793},
		{"type": "punctuation", "start": 796, "end": 797},
		{"type": "special_keyword", "start": 801, "end": 807},
		{"type": "punctuation", "start": 808, "end": 809},
		{"type": "keyword", "start": 809, "end": 813},
		{"type": "punctuation", "start": 813, "end": 814},
		{"type": "punctuation", "start": 816, "end": 817},
		{"type": "punctuation", "start": 818, "end": 819},
		{"type": "special_keyword", "start": 823, "end": 827},
		{"type": "string", "start": 828, "end": 831},
		{"type": "operator", "start": 831, "end": 832},
		{"type": "builtin", "start": 837, "end": 844},
		{"type": "punctuation", "start": 844, "end": 845},
		{"type": "function", "start": 845, "end": 848},
		{"type": "punctuation", "start": 848, "end": 849},
		{"type": "string", "start": 849, "end": 857},
		{"type": "punctuation", "start": 857, "end": 858},
		{"type": "punctuation", "start": 858, "end": 859},
		{"type": "special_keyword", "start": 864, "end": 869},
		{"type": "punctuation", "start": 869, "end": 870},
		{"type": "special_keyword", "start": 874, "end": 878},
		{"type": "string", "start": 879, "end": 882},
		{"type": "operator", "start": 882, "end": 883},
		{"type": "special_keyword", "start": 887, "end": 891},
		{"type": "string", "start": 892, "end": 895},
		{"type": "operator", "start": 895, "end": 896},
		{"type": "builtin", "start": 901, "end": 908},
		{"type": "punctuation", "start": 908, "end": 909},
		{"type": "function", "start": 909, "end": 912},
		{"type": "punctuation", "start": 912, "end": 913},
		{"type": "string", "start": 913, "end": 926},
		{"type": "punctuation", "start": 926, "end": 927},
		{"type": "punctuation", "start": 927, "end": 928},
		{"type": "special_keyword", "start": 933, "end": 938},
		{"type": "punctuation", "start": 938, "end": 939},
		{"type": "keyword", "start": 943, "end": 950},
		{"type": "operator", "start": 950, "end": 951},
		{"type": "builtin", "start": 956, "end": 963},
		{"type": "punctuation", "start": 963, "end": 964},
		{"type": "function", "start": 964, "end": 967},
		{"type": "punctuation", "start": 967, "end": 968},
		{"type": "string", "start": 968, "end": 977},
		{"type": "punctuation", "start": 977, "end": 978},
		{"type": "punctuation", "start": 978, "end": 979},
		{"type": "punctuation", "start": 982, "end": 983},
		{"type": "keyword", "start": 987, "end": 992},
		{"type": "operator", "start": 996, "end": 997},
		{"type": "punctuation", "start": 998, "end": 999},
		{"type": "operator", "start": 1005, "end": 1006},
		{"type": "operator", "start": 1006, "end": 1007},
		{"type": "builtin", "start": 1008, "end": 1015},
		{"type": "punctuation", "start": 1015, "end": 1016},
		{"type": "operator", "start": 1021, "end": 1022},
		{"type": "builtin", "start": 1023, "end": 1030},
		{"type": "punctuation", "start": 1030, "end": 1031},
		{"type": "operator", "start": 1032, "end": 1033},
		{"type": "punctuation", "start": 1034, "end": 1035},
		{"type": "operator", "start": 1045, "end": 1046},
		{"type": "string", "start": 1047, "end": 1051},
		{"type": "keyword", "start": 1052, "end": 1054},
		{"type": "keyword", "start": 1055, "end": 1059},
		{"type": "punctuation", "start": 1059, "end": 1060},
		{"type": "operator", "start": 1068, "end": 1069},
		{"type": "keyword", "start": 1070, "end": 1074},
		{"type": "keyword", "start": 1075, "end": 1085},
		{"type": "class_name", "start": 1086, "end": 1087},
		{"type": "constant", "start": 1086, "end": 1087},
		{"type": "punctuation", "start": 1087, "end": 1088},
		{"type": "punctuation", "start": 1091, "end": 1092},
		{"type": "punctuation", "start": 1092, "end": 1093},
		{"type": "keyword", "start": 1096, "end": 1102},
		{"type": "punctuation", "start": 1106, "end": 1107},
		{"type": "punctuation", "start": 1113, "end": 1114},
		{"type": "comment", "start": 1117, "end": 1123},
		{"type": "punctuation", "start": 1125, "end": 1126},
		{"type": "punctuation", "start": 1126, "end": 1127},
		{"type": "function", "start": 1130, "end": 1145},
		{"type": "punctuation", "start": 1145, "end": 1146},
		{"type": "operator", "start": 1148, "end": 1149},
		{"type": "builtin", "start": 1150, "end": 1156},
		{"type": "punctuation", "start": 1156, "end": 1157},
		{"type": "operator", "start": 1160, "end": 1161},
		{"type": "builtin", "start": 1162, "end": 1165},
		{"type": "punctuation", "start": 1165, "end": 1166},
		{"type": "punctuation", "start": 1167, "end": 1168},
		{"type": "special_keyword", "start": 1171, "end": 1176},
		{"type": "keyword", "start": 1177, "end": 1180},
		{"type": "class_name", "start": 1181, "end": 1186},
		{"type": "punctuation", "start": 1186, "end": 1187},
		{"type": "template_string", "start": 1187, "end": 1233},
		{"type": "template_punctuation", "start": 1187, "end": 1188},
		{"type": "interpolation", "start": 1188, "end": 1198},
		{"type": "interpolation_punctuation", "start": 1188, "end": 1190},
		{"type": "keyword", "start": 1190, "end": 1194},
		{"type": "punctuation", "start": 1194, "end": 1195},
		{"type": "interpolation_punctuation", "start": 1197, "end": 1198},
		{"type": "string", "start": 1198, "end": 1219},
		{"type": "interpolation", "start": 1219, "end": 1229},
		{"type": "interpolation_punctuation", "start": 1219, "end": 1221},
		{"type": "operator", "start": 1224, "end": 1225},
		{"type": "interpolation_punctuation", "start": 1228, "end": 1229},
		{"type": "string", "start": 1229, "end": 1232},
		{"type": "template_punctuation", "start": 1232, "end": 1233},
		{"type": "punctuation", "start": 1233, "end": 1234},
		{"type": "punctuation", "start": 1234, "end": 1235},
		{"type": "punctuation", "start": 1237, "end": 1238},
		{"type": "operator", "start": 1241, "end": 1242},
		{"type": "function", "start": 1242, "end": 1251},
		{"type": "punctuation", "start": 1251, "end": 1252},
		{"type": "punctuation", "start": 1252, "end": 1253},
		{"type": "punctuation", "start": 1254, "end": 1255},
		{"type": "keyword", "start": 1258, "end": 1263},
		{"type": "number", "start": 1264, "end": 1265},
		{"type": "punctuation", "start": 1265, "end": 1266},
		{"type": "keyword", "start": 1269, "end": 1274},
		{"type": "operator", "start": 1274, "end": 1275},
		{"type": "punctuation", "start": 1276, "end": 1277},
		{"type": "number", "start": 1277, "end": 1278},
		{"type": "punctuation", "start": 1278, "end": 1279},
		{"type": "number", "start": 1280, "end": 1281},
		{"type": "punctuation", "start": 1281, "end": 1282},
		{"type": "punctuation", "start": 1282, "end": 1283},
		{"type": "punctuation", "start": 1285, "end": 1286},
		{"type": "operator", "start": 1295, "end": 1296},
		{"type": "function", "start": 1296, "end": 1311},
		{"type": "punctuation", "start": 1311, "end": 1312},
		{"type": "punctuation", "start": 1312, "end": 1313},
		{"type": "punctuation", "start": 1314, "end": 1315},
		{"type": "keyword", "start": 1318, "end": 1323},
		{"type": "special_keyword", "start": 1324, "end": 1329},
		{"type": "builtin", "start": 1330, "end": 1337},
		{"type": "punctuation", "start": 1337, "end": 1338},
		{"type": "function", "start": 1338, "end": 1345},
		{"type": "punctuation", "start": 1345, "end": 1346},
		{"type": "number", "start": 1346, "end": 1347},
		{"type": "punctuation", "start": 1347, "end": 1348},
		{"type": "punctuation", "start": 1348, "end": 1349},
		{"type": "punctuation", "start": 1351, "end": 1352},
		{"type": "keyword", "start": 1355, "end": 1364},
		{"type": "keyword", "start": 1365, "end": 1370},
		{"type": "function", "start": 1371, "end": 1387},
		{"type": "punctuation", "start": 1387, "end": 1388},
		{"type": "punctuation", "start": 1388, "end": 1389},
		{"type": "operator", "start": 1389, "end": 1390},
		{"type": "builtin", "start": 1391, "end": 1398},
		{"type": "operator", "start": 1398, "end": 1399},
		{"type": "keyword", "start": 1399, "end": 1403},
		{"type": "operator", "start": 1403, "end": 1404},
		{"type": "punctuation", "start": 1405, "end": 1406},
		{"type": "special_keyword", "start": 1409, "end": 1412},
		{"type": "punctuation", "start": 1413, "end": 1414},
		{"type": "special_keyword", "start": 1418, "end": 1423},
		{"type": "keyword", "start": 1424, "end": 1427},
		{"type": "class_name", "start": 1428, "end": 1435},
		{"type": "builtin", "start": 1428, "end": 1435},
		{"type": "punctuation", "start": 1435, "end": 1436},
		{"type": "punctuation", "start": 1436, "end": 1437},
		{"type": "punctuation", "start": 1444, "end": 1445},
		{"type": "operator", "start": 1446, "end": 1448},
		{"type": "function", "start": 1449, "end": 1459},
		{"type": "punctuation", "start": 1459, "end": 1460},
		{"type": "punctuation", "start": 1467, "end": 1468},
		{"type": "number", "start": 1469, "end": 1472},
		{"type": "punctuation", "start": 1472, "end": 1473},
		{"type": "punctuation", "start": 1473, "end": 1474},
		{"type": "punctuation", "start": 1474, "end": 1475},
		{"type": "special_keyword", "start": 1479, "end": 1481},
		{"type": "punctuation", "start": 1482, "end": 1483},
		{"type": "punctuation", "start": 1487, "end": 1488},
		{"type": "function", "start": 1488, "end": 1494},
		{"type": "punctuation", "start": 1494, "end": 1495},
		{"type": "punctuation", "start": 1495, "end": 1496},
		{"type": "operator", "start": 1497, "end": 1498},
		{"type": "number", "start": 1499, "end": 1502},
		{"type": "punctuation", "start": 1502, "end": 1503},
		{"type": "punctuation", "start": 1504, "end": 1505},
		{"type": "builtin", "start": 1510, "end": 1517},
		{"type": "punctuation", "start": 1517, "end": 1518},
		{"type": "function", "start": 1518, "end": 1521},
		{"type": "punctuation", "start": 1521, "end": 1522},
		{"type": "keyword", "start": 1522, "end": 1525},
		{"type": "class_name", "start": 1526, "end": 1530},
		{"type": "punctuation", "start": 1530, "end": 1531},
		{"type": "punctuation", "start": 1531, "end": 1532},
		{"type": "punctuation", "start": 1532, "end": 1533},
		{"type": "punctuation", "start": 1533, "end": 1534},
		{"type": "comment", "start": 1535, "end": 1568},
		{"type": "punctuation", "start": 1572, "end": 1573},
		{"type": "special_keyword", "start": 1574, "end": 1578},
		{"type": "special_keyword", "start": 1579, "end": 1581},
		{"type": "punctuation", "start": 1582, "end": 1583},
		{"type": "punctuation", "start": 1587, "end": 1588},
		{"type": "function", "start": 1588, "end": 1594},
		{"type": "punctuation", "start": 1594, "end": 1595},
		{"type": "punctuation", "start": 1595, "end": 1596},
		{"type": "operator", "start": 1597, "end": 1598},
		{"type": "number", "start": 1599, "end": 1602},
		{"type": "punctuation", "start": 1602, "end": 1603},
		{"type": "punctuation", "start": 1604, "end": 1605},
		{"type": "builtin", "start": 1610, "end": 1617},
		{"type": "punctuation", "start": 1617, "end": 1618},
		{"type": "function", "start": 1618, "end": 1621},
		{"type": "punctuation", "start": 1621, "end": 1622},
		{"type": "string", "start": 1622, "end": 1638},
		{"type": "punctuation", "start": 1638, "end": 1639},
		{"type": "punctuation", "start": 1639, "end": 1640},
		{"type": "punctuation", "start": 1644, "end": 1645},
		{"type": "special_keyword", "start": 1646, "end": 1650},
		{"type": "punctuation", "start": 1651, "end": 1652},
		{"type": "builtin", "start": 1657, "end": 1664},
		{"type": "punctuation", "start": 1664, "end": 1665},
		{"type": "function", "start": 1665, "end": 1668},
		{"type": "punctuation", "start": 1668, "end": 1669},
		{"type": "string", "start": 1669, "end": 1682},
		{"type": "punctuation", "start": 1682, "end": 1683},
		{"type": "punctuation", "start": 1683, "end": 1684},
		{"type": "punctuation", "start": 1688, "end": 1689},
		{"type": "punctuation", "start": 1692, "end": 1693},
		{"type": "special_keyword", "start": 1694, "end": 1699},
		{"type": "punctuation", "start": 1700, "end": 1701},
		{"type": "operator", "start": 1706, "end": 1707},
		{"type": "builtin", "start": 1708, "end": 1715},
		{"type": "punctuation", "start": 1715, "end": 1716},
		{"type": "punctuation", "start": 1717, "end": 1718},
		{"type": "builtin", "start": 1722, "end": 1729},
		{"type": "punctuation", "start": 1729, "end": 1730},
		{"type": "function", "start": 1730, "end": 1735},
		{"type": "punctuation", "start": 1735, "end": 1736},
		{"type": "punctuation", "start": 1741, "end": 1742},
		{"type": "punctuation", "start": 1742, "end": 1743},
		{"type": "punctuation", "start": 1746, "end": 1747},
		{"type": "special_keyword", "start": 1748, "end": 1755},
		{"type": "punctuation", "start": 1756, "end": 1757},
		{"type": "builtin", "start": 1761, "end": 1768},
		{"type": "punctuation", "start": 1768, "end": 1769},
		{"type": "function", "start": 1769, "end": 1772},
		{"type": "punctuation", "start": 1772, "end": 1773},
		{"type": "string", "start": 1773, "end": 1788},
		{"type": "punctuation", "start": 1788, "end": 1789},
		{"type": "punctuation", "start": 1789, "end": 1790},
		{"type": "punctuation", "start": 1793, "end": 1794},
		{"type": "punctuation", "start": 1796, "end": 1797},
		{"type": "punctuation", "start": 1798, "end": 1799},
		{"type": "comment", "start": 1801, "end": 1811},
		{"type": "comment", "start": 1813, "end": 1856},
		{"type": "comment", "start": 1858, "end": 1882},
		{"type": "special_keyword", "start": 1884, "end": 1890},
		{"type": "punctuation", "start": 1891, "end": 1892},
		{"type": "punctuation", "start": 1904, "end": 1905},
		{"type": "keyword", "start": 1906, "end": 1910},
		{"type": "class_name", "start": 1911, "end": 1922},
		{"type": "punctuation", "start": 1922, "end": 1923},
		{"type": "special_keyword", "start": 1924, "end": 1928},
		{"type": "string", "start": 1929, "end": 1948},
		{"type": "punctuation", "start": 1948, "end": 1949},
		{"type": "special_keyword", "start": 1950, "end": 1956},
		{"type": "operator", "start": 1957, "end": 1958},
		{"type": "special_keyword", "start": 1959, "end": 1961},
		{"type": "constant", "start": 1962, "end": 1963},
		{"type": "special_keyword", "start": 1964, "end": 1968},
		{"type": "string", "start": 1969, "end": 1988},
		{"type": "punctuation", "start": 1988, "end": 1989},
		{"type": "special_keyword", "start": 1991, "end": 1997},
		{"type": "punctuation", "start": 1998, "end": 1999},
		{"type": "punctuation", "start": 2000, "end": 2001},
		{"type": "constant", "start": 2002, "end": 2003},
		{"type": "punctuation", "start": 2003, "end": 2004},
		{"type": "punctuation", "start": 2006, "end": 2007},
		{"type": "punctuation", "start": 2009, "end": 2010},
		{"type": "constant", "start": 2011, "end": 2012},
		{"type": "punctuation", "start": 2012, "end": 2013},
		{"type": "punctuation", "start": 2013, "end": 2014},
		{"type": "special_keyword", "start": 2029, "end": 2031},
		{"type": "builtin", "start": 2032, "end": 2039},
		{"type": "special_keyword", "start": 2040, "end": 2042},
		{"type": "builtin", "start": 2043, "end": 2046},
		{"type": "special_keyword", "start": 2047, "end": 2049},
		{"type": "punctuation", "start": 2083, "end": 2084},
		{"type": "special_keyword", "start": 2086, "end": 2092},
		{"type": "keyword", "start": 2093, "end": 2102},
		{"type": "class_name", "start": 2103, "end": 2109},
		{"type": "punctuation", "start": 2110, "end": 2111},
		{"type": "operator", "start": 2117, "end": 2118},
		{"type": "builtin", "start": 2119, "end": 2125},
		{"type": "punctuation", "start": 2125, "end": 2126},
		{"type": "operator", "start": 2131, "end": 2132},
		{"type": "builtin", "start": 2133, "end": 2139},
		{"type": "punctuation", "start": 2139, "end": 2140},
		{"type": "punctuation", "start": 2141, "end": 2142},
		{"type": "special_keyword", "start": 2144, "end": 2150},
		{"type": "keyword", "start": 2151, "end": 2156},
		{"type": "operator", "start": 2163, "end": 2164},
		{"type": "operator", "start": 2172, "end": 2173},
		{"type": "punctuation", "start": 2174, "end": 2175},
		{"type": "operator", "start": 2179, "end": 2180},
		{"type": "string", "start": 2181, "end": 2188},
		{"type": "punctuation", "start": 2188, "end": 2189},
		{"type": "operator", "start": 2193, "end": 2194},
		{"type": "number", "start": 2195, "end": 2198},
		{"type": "punctuation", "start": 2198, "end": 2199},
		{"type": "punctuation", "start": 2199, "end": 2200},
		{"type": "special_keyword", "start": 2202, "end": 2208},
		{"type": "keyword", "start": 2209, "end": 2217},
		{"type": "function", "start": 2218, "end": 2221},
		{"type": "punctuation", "start": 2221, "end": 2222},
		{"type": "operator", "start": 2223, "end": 2224},
		{"type": "builtin", "start": 2225, "end": 2231},
		{"type": "punctuation", "start": 2231, "end": 2232},
		{"type": "operator", "start": 2234, "end": 2235},
		{"type": "builtin", "start": 2236, "end": 2242},
		{"type": "punctuation", "start": 2242, "end": 2243},
		{"type": "operator", "start": 2243, "end": 2244},
		{"type": "builtin", "start": 2245, "end": 2251},
		{"type": "punctuation", "start": 2252, "end": 2253},
		{"type": "special_keyword", "start": 2255, "end": 2261},
		{"type": "operator", "start": 2264, "end": 2265},
		{"type": "punctuation", "start": 2267, "end": 2268},
		{"type": "punctuation", "start": 2269, "end": 2270},
		{"type": "special_keyword", "start": 2272, "end": 2278},
		{"type": "keyword", "start": 2279, "end": 2284},
		{"type": "function_variable", "start": 2285, "end": 2289},
		{"type": "operator", "start": 2290, "end": 2291},
		{"type": "punctuation", "start": 2292, "end": 2293},
		{"type": "operator", "start": 2294, "end": 2295},
		{"type": "builtin", "start": 2296, "end": 2299},
		{"type": "punctuation", "start": 2299, "end": 2300},
		{"type": "operator", "start": 2302, "end": 2303},
		{"type": "builtin", "start": 2304, "end": 2307},
		{"type": "punctuation", "start": 2307, "end": 2308},
		{"type": "operator", "start": 2308, "end": 2309},
		{"type": "builtin", "start": 2310, "end": 2313},
		{"type": "operator", "start": 2314, "end": 2316},
		{"type": "operator", "start": 2319, "end": 2320},
		{"type": "punctuation", "start": 2322, "end": 2323},
		{"type": "comment", "start": 2325, "end": 2347},
		{"type": "special_keyword", "start": 2348, "end": 2354},
		{"type": "keyword", "start": 2355, "end": 2360},
		{"type": "operator", "start": 2379, "end": 2380},
		{"type": "string", "start": 2381, "end": 2410},
		{"type": "punctuation", "start": 2410, "end": 2411},
		{"type": "special_keyword", "start": 2412, "end": 2418},
		{"type": "keyword", "start": 2419, "end": 2424},
		{"type": "operator", "start": 2442, "end": 2443},
		{"type": "string", "start": 2444, "end": 2470},
		{"type": "punctuation", "start": 2470, "end": 2471},
		{"type": "special_keyword", "start": 2472, "end": 2478},
		{"type": "keyword", "start": 2479, "end": 2484},
		{"type": "operator", "start": 2504, "end": 2505},
		{"type": "template_string", "start": 2506, "end": 2523},
		{"type": "template_punctuation", "start": 2506, "end": 2507},
		{"type": "string", "start": 2507, "end": 2514},
		{"type": "interpolation", "start": 2514, "end": 2522},
		{"type": "interpolation_punctuation", "start": 2514, "end": 2516},
		{"type": "number", "start": 2516, "end": 2517},
		{"type": "operator", "start": 2518, "end": 2519},
		{"type": "number", "start": 2520, "end": 2521},
		{"type": "interpolation_punctuation", "start": 2521, "end": 2522},
		{"type": "template_punctuation", "start": 2522, "end": 2523},
		{"type": "punctuation", "start": 2523, "end": 2524},
		{"type": "comment", "start": 2526, "end": 2558},
		{"type": "special_keyword", "start": 2559, "end": 2565},
		{"type": "keyword", "start": 2566, "end": 2571},
		{"type": "operator", "start": 2578, "end": 2579},
		{"type": "regex", "start": 2580, "end": 2589},
		{"type": "regex_delimiter", "start": 2580, "end": 2581},
		{"type": "regex_source", "start": 2581, "end": 2587},
		{"type": "regex_delimiter", "start": 2587, "end": 2588},
		{"type": "regex_flags", "start": 2588, "end": 2589},
		{"type": "punctuation", "start": 2589, "end": 2590},
		{"type": "special_keyword", "start": 2591, "end": 2597},
		{"type": "keyword", "start": 2598, "end": 2603},
		{"type": "operator", "start": 2618, "end": 2619},
		{"type": "regex", "start": 2620, "end": 2652},
		{"type": "regex_delimiter", "start": 2620, "end": 2621},
		{"type": "regex_source", "start": 2621, "end": 2651},
		{"type": "regex_delimiter", "start": 2651, "end": 2652},
		{"type": "punctuation", "start": 2652, "end": 2653},
		{"type": "comment", "start": 2655, "end": 2711},
		{"type": "comment", "start": 2712, "end": 2763}
	],
	"html": "<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class_name\">Some_Type</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">const</span> class_decorator<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> property_decorator<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> method_decorator<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class_name\">Base</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">abstract</span> <span class=\"token function\">abstract_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function decorator_name\">class_decorator</span></span>\n<span class=\"token keyword\">class</span> <span class=\"token class_name\"><span class=\"token constant\">D</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class_name\">Base</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">readonly</span> d1<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">;</span>\n\td2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\td3 <span class=\"token operator\">=</span> <span class=\"token function\">$state</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function decorator_name\">property_decorator</span></span>\n\tdecorated <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>d2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d2 <span class=\"token operator\">=</span> d2<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">abstract_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// implementation</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function decorator_name\">method_decorator</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'example'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>option<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">class_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token special_keyword\">return</span> <span class=\"token template_string\"><span class=\"token template_punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d1<span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token template_punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function_variable function\">instance_method</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">/* ... */</span>\n\t\t<span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token special_keyword\">do</span> <span class=\"token punctuation\">{</span>\n\t\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token special_keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token special_keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> c2 <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token special_keyword\">if</span> <span class=\"token punctuation\">(</span>c2 <span class=\"token operator\">===</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">)</span> <span class=\"token special_keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token special_keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>c2<span class=\"token punctuation\">)</span> <span class=\"token special_keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">#private_method</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token special_keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token special_keyword\">case</span> <span class=\"token string\">'a'</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'case a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token special_keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token special_keyword\">case</span> <span class=\"token string\">'b'</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token special_keyword\">case</span> <span class=\"token string\">'c'</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'case b or c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token special_keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'default'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">const</span> obj<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>has_d1<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span> is_d<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t\thas_d1<span class=\"token operator\">:</span> <span class=\"token string\">'d1'</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n\t\t\tis_d<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class_name\"><span class=\"token constant\">D</span></span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>has_d1<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// foo</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">#private_method</span><span class=\"token punctuation\">(</span>a2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> c2<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token special_keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class_name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template_string\"><span class=\"token template_punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d1<span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token string\">\n\t\t\tmultiline\n\t\t\tetc </span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span>a2 <span class=\"token operator\">+</span> c2<span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token string\">\n\t\t</span><span class=\"token template_punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token operator\">*</span><span class=\"token function\">generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">yield</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tasync <span class=\"token operator\">*</span><span class=\"token function\">async_generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">yield</span> <span class=\"token special_keyword\">await</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">async</span> <span class=\"token function\">protected_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token special_keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token special_keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class_name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token special_keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class_name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// eslint-disable-line no-console</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token special_keyword\">else</span> <span class=\"token special_keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'else if branch'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token special_keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'else branch'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token special_keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token special_keyword\">finally</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'finally block'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// comment</span>\n\n<span class=\"token comment\">/*\nother comment\n\nconst comment = false;\n*/</span>\n\n<span class=\"token comment\">/**\n * JSDoc comment\n */</span>\n\n<span class=\"token special_keyword\">import</span> <span class=\"token punctuation\">{</span>sample_langs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">type</span> <span class=\"token class_name\">Sample_Lang</span><span class=\"token punctuation\">}</span> <span class=\"token special_keyword\">from</span> <span class=\"token string\">'../code_sample.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token special_keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token special_keyword\">as</span> <span class=\"token constant\">A</span> <span class=\"token special_keyword\">from</span> <span class=\"token string\">'../code_sample.js'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token special_keyword\">export</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nsample_langs <span class=\"token special_keyword\">as</span> <span class=\"token builtin\">unknown</span> <span class=\"token special_keyword\">as</span> <span class=\"token builtin\">any</span> <span class=\"token special_keyword\">as</span> Sample_Lang satisfies Sample_Lang<span class=\"token punctuation\">;</span>\n\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class_name\">Some_E</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\tage<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">const</span> some_e<span class=\"token operator\">:</span> Some_E <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'A. H.'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token special_keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function_variable function\">plus</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// boundary test cases</span>\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">const</span> str_with_keywords <span class=\"token operator\">=</span> <span class=\"token string\">'const class function string'</span><span class=\"token punctuation\">;</span>\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">const</span> str_with_comment <span class=\"token operator\">=</span> <span class=\"token string\">'// this is not a comment'</span><span class=\"token punctuation\">;</span>\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">const</span> template_with_expr <span class=\"token operator\">=</span> <span class=\"token template_string\"><span class=\"token template_punctuation string\">`</span><span class=\"token string\">Value: </span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token template_punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// regex that looks like comment</span>\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">const</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex_delimiter\">/</span><span class=\"token regex_source lang_regex\">\\/\\/.*</span><span class=\"token regex_delimiter\">/</span><span class=\"token regex_flags\">g</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">const</span> complex_regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex_delimiter\">/</span><span class=\"token regex_source lang_regex\">^(?:\\/\\*.*?\\*\\/|\\/\\/.*|[^/])+$</span><span class=\"token regex_delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// string in comment should not be highlighted as string</span>\n<span class=\"token comment\">// const commented = \"this string is in a comment\";</span>\n"
}
