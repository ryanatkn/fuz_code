{
	"sample": {
		"lang": "ts",
		"variant": "complex",
		"content": "const a = 1;\n\nconst b: string = 'b';\n\nconst c = true;\n\nexport type Some_Type = 1 | 'b' | true;\n\ndeclare const class_decorator: any, property_decorator: any, method_decorator: any;\n\nabstract class Base {\n\tabstract abstract_method(): void;\n}\n\n@class_decorator\nclass D extends Base {\n\treadonly d1: string = 'd';\n\td2: number;\n\td3 = $state(null);\n\n\t@property_decorator\n\tdecorated = true;\n\n\tconstructor(d2: number) {\n\t\tsuper();\n\t\tthis.d2 = d2;\n\t}\n\n\tabstract_method(): void {\n\t\t// implementation\n\t}\n\n\t@method_decorator('example', {option: true})\n\tclass_method(): string {\n\t\treturn `Hello, ${this.d1}`;\n\t}\n\n\tinstance_method = (): void => {\n\t\t/* ... */\n\t\tlet i = 0;\n\t\tdo {\n\t\t\ti++;\n\t\t} while (i < 3);\n\n\t\tfor (const c2 of this.d1) {\n\t\t\tif (c2 === 'd') continue;\n\t\t\tif (!c2) break;\n\t\t\tthis.#private_method(a, c2);\n\t\t}\n\n\t\tswitch (this.d1) {\n\t\t\tcase 'a':\n\t\t\t\tconsole.log('case a');\n\t\t\t\tbreak;\n\t\t\tcase 'b':\n\t\t\tcase 'c':\n\t\t\t\tconsole.log('case b or c');\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log('default');\n\t\t}\n\n\t\tconst obj: {has_d1?: boolean; is_d: boolean} = {\n\t\t\thas_d1: 'd1' in this,\n\t\t\tis_d: this instanceof D,\n\t\t};\n\t\tdelete obj.has_d1;\n\t\t// foo\n\t};\n\n\t#private_method(a2: number, c2: any) {\n\t\tthrow new Error(`${this.d1}\n\t\t\tmultiline\n\t\t\tetc ${a2 + c2}\n\t\t`);\n\t}\n\n\t*generator() {\n\t\tyield 1;\n\t\tyield* [2, 3];\n\t}\n\n\tasync *async_generator() {\n\t\tyield await Promise.resolve(4);\n\t}\n\n\tprotected async protected_method(): Promise<void> {\n\t\ttry {\n\t\t\tawait new Promise((resolve) => setTimeout(resolve, 100));\n\t\t\tif (Math.random() > 0.5) {\n\t\t\t\tconsole.log(new Date()); // eslint-disable-line no-console\n\t\t\t} else if (Math.random() > 0.2) {\n\t\t\t\tconsole.log('else if branch');\n\t\t\t} else {\n\t\t\t\tconsole.log('else branch');\n\t\t\t}\n\t\t} catch (error: unknown) {\n\t\t\tconsole.error(error);\n\t\t} finally {\n\t\t\tconsole.log('finally block');\n\t\t}\n\t}\n}\n\n// comment\n\n/*\nother comment\n\nconst comment = false;\n*/\n\n/**\n * JSDoc comment\n */\n\nimport {sample_langs, type Sample_Lang} from '../code_sample.js';\nimport * as A from '../code_sample.js';\n\nexport {a, A, b, c, D};\n\nsample_langs as unknown as any as Sample_Lang satisfies Sample_Lang;\n\nexport interface Some_E<T = undefined> {\n\tname: string;\n\tage: number;\n\tt?: T;\n}\n\nconst e: {name: string; age: number} = {name: 'A. H.', age: 100};\nconst v = [['', e]] as const;\nexport const some_e: Map<string, Some_E> = new Map(v);\n\nexport function add(x: number, y: number): number {\n\treturn x + y;\n}\n\nexport const plus = (a: any, b: any): any => a + b;\n\n// boundary test cases\nexport const str_with_keywords = 'const class function string';\nexport const str_with_comment = '// this is not a comment';\nexport const template_with_expr = `Value: ${1 + 2}`;\n\n// regex that looks like comment\nexport const regex = /\\/\\/.*/g;\nexport const complex_regex = /^(?:\\/\\*.*?\\*\\/|\\/\\/.*|[^/])+$/;\n\n// string in comment should not be highlighted as string\n// const commented = \"this string is in a comment\";\n",
		"filepath": "src/lib/samples/sample_complex.ts"
	},
	"tokens": [
		{"type": "keyword", "start": 0, "end": 5},
		{"type": "operator", "start": 8, "end": 9},
		{"type": "number", "start": 10, "end": 11},
		{"type": "punctuation", "start": 11, "end": 12},
		{"type": "keyword", "start": 14, "end": 19},
		{"type": "type_annotation", "start": 21, "end": 30},
		{"type": ":", "start": 21, "end": 22},
		{"type": "type", "start": 22, "end": 30},
		{"type": "builtin", "start": 23, "end": 29},
		{"type": "operator", "start": 30, "end": 31},
		{"type": "string", "start": 32, "end": 35},
		{"type": "punctuation", "start": 35, "end": 36},
		{"type": "keyword", "start": 38, "end": 43},
		{"type": "operator", "start": 46, "end": 47},
		{"type": "boolean", "start": 48, "end": 52},
		{"type": "punctuation", "start": 52, "end": 53},
		{"type": "special_keyword", "start": 55, "end": 61},
		{"type": "keyword", "start": 62, "end": 66},
		{"type": "class_name", "start": 67, "end": 76},
		{"type": "type_name", "start": 67, "end": 76},
		{"type": "operator", "start": 77, "end": 78},
		{"type": "number", "start": 79, "end": 80},
		{"type": "operator", "start": 81, "end": 82},
		{"type": "string", "start": 83, "end": 86},
		{"type": "operator", "start": 87, "end": 88},
		{"type": "boolean", "start": 89, "end": 93},
		{"type": "punctuation", "start": 93, "end": 94},
		{"type": "keyword", "start": 96, "end": 103},
		{"type": "keyword", "start": 104, "end": 109},
		{"type": "operator", "start": 125, "end": 126},
		{"type": "builtin", "start": 127, "end": 130},
		{"type": "punctuation", "start": 130, "end": 131},
		{"type": "operator", "start": 150, "end": 151},
		{"type": "builtin", "start": 152, "end": 155},
		{"type": "punctuation", "start": 155, "end": 156},
		{"type": "operator", "start": 173, "end": 174},
		{"type": "builtin", "start": 175, "end": 178},
		{"type": "punctuation", "start": 178, "end": 179},
		{"type": "keyword", "start": 181, "end": 189},
		{"type": "keyword", "start": 190, "end": 195},
		{"type": "class_name", "start": 196, "end": 200},
		{"type": "type_name", "start": 196, "end": 200},
		{"type": "punctuation", "start": 201, "end": 202},
		{"type": "keyword", "start": 204, "end": 212},
		{"type": "function", "start": 213, "end": 228},
		{"type": "punctuation", "start": 228, "end": 229},
		{"type": "punctuation", "start": 229, "end": 230},
		{"type": "operator", "start": 230, "end": 231},
		{"type": "keyword", "start": 232, "end": 236},
		{"type": "punctuation", "start": 236, "end": 237},
		{"type": "punctuation", "start": 238, "end": 239},
		{"type": "decorator", "start": 241, "end": 257},
		{"type": "at", "start": 241, "end": 242},
		{"type": "function", "start": 242, "end": 257},
		{"type": "keyword", "start": 258, "end": 263},
		{"type": "class_name", "start": 264, "end": 265},
		{"type": "constant", "start": 264, "end": 265},
		{"type": "keyword", "start": 266, "end": 273},
		{"type": "class_name", "start": 274, "end": 278},
		{"type": "type_name", "start": 274, "end": 278},
		{"type": "punctuation", "start": 279, "end": 280},
		{"type": "keyword", "start": 282, "end": 290},
		{"type": "type_annotation", "start": 293, "end": 302},
		{"type": ":", "start": 293, "end": 294},
		{"type": "type", "start": 294, "end": 302},
		{"type": "builtin", "start": 295, "end": 301},
		{"type": "operator", "start": 302, "end": 303},
		{"type": "string", "start": 304, "end": 307},
		{"type": "punctuation", "start": 307, "end": 308},
		{"type": "operator", "start": 312, "end": 313},
		{"type": "builtin", "start": 314, "end": 320},
		{"type": "punctuation", "start": 320, "end": 321},
		{"type": "operator", "start": 326, "end": 327},
		{"type": "function", "start": 328, "end": 334},
		{"type": "punctuation", "start": 334, "end": 335},
		{"type": "keyword", "start": 335, "end": 339},
		{"type": "punctuation", "start": 339, "end": 340},
		{"type": "punctuation", "start": 340, "end": 341},
		{"type": "decorator", "start": 344, "end": 363},
		{"type": "at", "start": 344, "end": 345},
		{"type": "function", "start": 345, "end": 363},
		{"type": "operator", "start": 375, "end": 376},
		{"type": "boolean", "start": 377, "end": 381},
		{"type": "punctuation", "start": 381, "end": 382},
		{"type": "function", "start": 385, "end": 396},
		{"type": "punctuation", "start": 396, "end": 397},
		{"type": "operator", "start": 399, "end": 400},
		{"type": "builtin", "start": 401, "end": 407},
		{"type": "punctuation", "start": 407, "end": 408},
		{"type": "punctuation", "start": 409, "end": 410},
		{"type": "keyword", "start": 413, "end": 418},
		{"type": "punctuation", "start": 418, "end": 419},
		{"type": "punctuation", "start": 419, "end": 420},
		{"type": "punctuation", "start": 420, "end": 421},
		{"type": "keyword", "start": 424, "end": 428},
		{"type": "punctuation", "start": 428, "end": 429},
		{"type": "operator", "start": 432, "end": 433},
		{"type": "punctuation", "start": 436, "end": 437},
		{"type": "punctuation", "start": 439, "end": 440},
		{"type": "function", "start": 443, "end": 458},
		{"type": "punctuation", "start": 458, "end": 459},
		{"type": "punctuation", "start": 459, "end": 460},
		{"type": "operator", "start": 460, "end": 461},
		{"type": "keyword", "start": 462, "end": 466},
		{"type": "punctuation", "start": 467, "end": 468},
		{"type": "comment", "start": 471, "end": 488},
		{"type": "punctuation", "start": 490, "end": 491},
		{"type": "decorator", "start": 494, "end": 511},
		{"type": "at", "start": 494, "end": 495},
		{"type": "function", "start": 495, "end": 511},
		{"type": "punctuation", "start": 511, "end": 512},
		{"type": "string", "start": 512, "end": 521},
		{"type": "punctuation", "start": 521, "end": 522},
		{"type": "punctuation", "start": 523, "end": 524},
		{"type": "operator", "start": 530, "end": 531},
		{"type": "boolean", "start": 532, "end": 536},
		{"type": "punctuation", "start": 536, "end": 537},
		{"type": "punctuation", "start": 537, "end": 538},
		{"type": "function", "start": 540, "end": 552},
		{"type": "punctuation", "start": 552, "end": 553},
		{"type": "punctuation", "start": 553, "end": 554},
		{"type": "operator", "start": 554, "end": 555},
		{"type": "builtin", "start": 556, "end": 562},
		{"type": "punctuation", "start": 563, "end": 564},
		{"type": "special_keyword", "start": 567, "end": 573},
		{"type": "template_string", "start": 574, "end": 593},
		{"type": "template_punctuation", "start": 574, "end": 575},
		{"type": "string", "start": 575, "end": 582},
		{"type": "interpolation", "start": 582, "end": 592},
		{"type": "interpolation_punctuation", "start": 582, "end": 584},
		{"type": "keyword", "start": 584, "end": 588},
		{"type": "punctuation", "start": 588, "end": 589},
		{"type": "interpolation_punctuation", "start": 591, "end": 592},
		{"type": "template_punctuation", "start": 592, "end": 593},
		{"type": "punctuation", "start": 593, "end": 594},
		{"type": "punctuation", "start": 596, "end": 597},
		{"type": "function_variable", "start": 600, "end": 615},
		{"type": "operator", "start": 616, "end": 617},
		{"type": "punctuation", "start": 618, "end": 619},
		{"type": "punctuation", "start": 619, "end": 620},
		{"type": "type_annotation", "start": 620, "end": 627},
		{"type": ":", "start": 620, "end": 621},
		{"type": "type", "start": 621, "end": 627},
		{"type": "keyword", "start": 622, "end": 626},
		{"type": "operator", "start": 627, "end": 629},
		{"type": "punctuation", "start": 630, "end": 631},
		{"type": "comment", "start": 634, "end": 643},
		{"type": "keyword", "start": 646, "end": 649},
		{"type": "operator", "start": 652, "end": 653},
		{"type": "number", "start": 654, "end": 655},
		{"type": "punctuation", "start": 655, "end": 656},
		{"type": "special_keyword", "start": 659, "end": 661},
		{"type": "punctuation", "start": 662, "end": 663},
		{"type": "operator", "start": 668, "end": 670},
		{"type": "punctuation", "start": 670, "end": 671},
		{"type": "punctuation", "start": 674, "end": 675},
		{"type": "special_keyword", "start": 676, "end": 681},
		{"type": "punctuation", "start": 682, "end": 683},
		{"type": "operator", "start": 685, "end": 686},
		{"type": "number", "start": 687, "end": 688},
		{"type": "punctuation", "start": 688, "end": 689},
		{"type": "punctuation", "start": 689, "end": 690},
		{"type": "special_keyword", "start": 694, "end": 697},
		{"type": "punctuation", "start": 698, "end": 699},
		{"type": "keyword", "start": 699, "end": 704},
		{"type": "keyword", "start": 708, "end": 710},
		{"type": "keyword", "start": 711, "end": 715},
		{"type": "punctuation", "start": 715, "end": 716},
		{"type": "punctuation", "start": 718, "end": 719},
		{"type": "punctuation", "start": 720, "end": 721},
		{"type": "special_keyword", "start": 725, "end": 727},
		{"type": "punctuation", "start": 728, "end": 729},
		{"type": "operator", "start": 732, "end": 735},
		{"type": "string", "start": 736, "end": 739},
		{"type": "punctuation", "start": 739, "end": 740},
		{"type": "special_keyword", "start": 741, "end": 749},
		{"type": "punctuation", "start": 749, "end": 750},
		{"type": "special_keyword", "start": 754, "end": 756},
		{"type": "punctuation", "start": 757, "end": 758},
		{"type": "operator", "start": 758, "end": 759},
		{"type": "punctuation", "start": 761, "end": 762},
		{"type": "special_keyword", "start": 763, "end": 768},
		{"type": "punctuation", "start": 768, "end": 769},
		{"type": "keyword", "start": 773, "end": 777},
		{"type": "punctuation", "start": 777, "end": 778},
		{"type": "function", "start": 778, "end": 793},
		{"type": "punctuation", "start": 793, "end": 794},
		{"type": "punctuation", "start": 795, "end": 796},
		{"type": "punctuation", "start": 799, "end": 800},
		{"type": "punctuation", "start": 800, "end": 801},
		{"type": "punctuation", "start": 804, "end": 805},
		{"type": "special_keyword", "start": 809, "end": 815},
		{"type": "punctuation", "start": 816, "end": 817},
		{"type": "keyword", "start": 817, "end": 821},
		{"type": "punctuation", "start": 821, "end": 822},
		{"type": "punctuation", "start": 824, "end": 825},
		{"type": "punctuation", "start": 826, "end": 827},
		{"type": "special_keyword", "start": 831, "end": 835},
		{"type": "string", "start": 836, "end": 839},
		{"type": "operator", "start": 839, "end": 840},
		{"type": "builtin", "start": 845, "end": 852},
		{"type": "punctuation", "start": 852, "end": 853},
		{"type": "function", "start": 853, "end": 856},
		{"type": "punctuation", "start": 856, "end": 857},
		{"type": "string", "start": 857, "end": 865},
		{"type": "punctuation", "start": 865, "end": 866},
		{"type": "punctuation", "start": 866, "end": 867},
		{"type": "special_keyword", "start": 872, "end": 877},
		{"type": "punctuation", "start": 877, "end": 878},
		{"type": "special_keyword", "start": 882, "end": 886},
		{"type": "string", "start": 887, "end": 890},
		{"type": "operator", "start": 890, "end": 891},
		{"type": "special_keyword", "start": 895, "end": 899},
		{"type": "string", "start": 900, "end": 903},
		{"type": "operator", "start": 903, "end": 904},
		{"type": "builtin", "start": 909, "end": 916},
		{"type": "punctuation", "start": 916, "end": 917},
		{"type": "function", "start": 917, "end": 920},
		{"type": "punctuation", "start": 920, "end": 921},
		{"type": "string", "start": 921, "end": 934},
		{"type": "punctuation", "start": 934, "end": 935},
		{"type": "punctuation", "start": 935, "end": 936},
		{"type": "special_keyword", "start": 941, "end": 946},
		{"type": "punctuation", "start": 946, "end": 947},
		{"type": "special_keyword", "start": 951, "end": 958},
		{"type": "operator", "start": 958, "end": 959},
		{"type": "builtin", "start": 964, "end": 971},
		{"type": "punctuation", "start": 971, "end": 972},
		{"type": "function", "start": 972, "end": 975},
		{"type": "punctuation", "start": 975, "end": 976},
		{"type": "string", "start": 976, "end": 985},
		{"type": "punctuation", "start": 985, "end": 986},
		{"type": "punctuation", "start": 986, "end": 987},
		{"type": "punctuation", "start": 990, "end": 991},
		{"type": "keyword", "start": 995, "end": 1000},
		{"type": "operator", "start": 1004, "end": 1005},
		{"type": "punctuation", "start": 1006, "end": 1007},
		{"type": "operator", "start": 1013, "end": 1014},
		{"type": "operator", "start": 1014, "end": 1015},
		{"type": "builtin", "start": 1016, "end": 1023},
		{"type": "punctuation", "start": 1023, "end": 1024},
		{"type": "operator", "start": 1029, "end": 1030},
		{"type": "builtin", "start": 1031, "end": 1038},
		{"type": "punctuation", "start": 1038, "end": 1039},
		{"type": "operator", "start": 1040, "end": 1041},
		{"type": "punctuation", "start": 1042, "end": 1043},
		{"type": "operator", "start": 1053, "end": 1054},
		{"type": "string", "start": 1055, "end": 1059},
		{"type": "keyword", "start": 1060, "end": 1062},
		{"type": "keyword", "start": 1063, "end": 1067},
		{"type": "punctuation", "start": 1067, "end": 1068},
		{"type": "operator", "start": 1076, "end": 1077},
		{"type": "keyword", "start": 1078, "end": 1082},
		{"type": "keyword", "start": 1083, "end": 1093},
		{"type": "class_name", "start": 1094, "end": 1095},
		{"type": "constant", "start": 1094, "end": 1095},
		{"type": "punctuation", "start": 1095, "end": 1096},
		{"type": "punctuation", "start": 1099, "end": 1100},
		{"type": "punctuation", "start": 1100, "end": 1101},
		{"type": "keyword", "start": 1104, "end": 1110},
		{"type": "punctuation", "start": 1114, "end": 1115},
		{"type": "punctuation", "start": 1121, "end": 1122},
		{"type": "comment", "start": 1125, "end": 1131},
		{"type": "punctuation", "start": 1133, "end": 1134},
		{"type": "punctuation", "start": 1134, "end": 1135},
		{"type": "function", "start": 1138, "end": 1153},
		{"type": "punctuation", "start": 1153, "end": 1154},
		{"type": "operator", "start": 1156, "end": 1157},
		{"type": "builtin", "start": 1158, "end": 1164},
		{"type": "punctuation", "start": 1164, "end": 1165},
		{"type": "operator", "start": 1168, "end": 1169},
		{"type": "builtin", "start": 1170, "end": 1173},
		{"type": "punctuation", "start": 1173, "end": 1174},
		{"type": "punctuation", "start": 1175, "end": 1176},
		{"type": "special_keyword", "start": 1179, "end": 1184},
		{"type": "keyword", "start": 1185, "end": 1188},
		{"type": "class_name", "start": 1189, "end": 1194},
		{"type": "type_name", "start": 1189, "end": 1194},
		{"type": "punctuation", "start": 1194, "end": 1195},
		{"type": "template_string", "start": 1195, "end": 1241},
		{"type": "template_punctuation", "start": 1195, "end": 1196},
		{"type": "interpolation", "start": 1196, "end": 1206},
		{"type": "interpolation_punctuation", "start": 1196, "end": 1198},
		{"type": "keyword", "start": 1198, "end": 1202},
		{"type": "punctuation", "start": 1202, "end": 1203},
		{"type": "interpolation_punctuation", "start": 1205, "end": 1206},
		{"type": "string", "start": 1206, "end": 1227},
		{"type": "interpolation", "start": 1227, "end": 1237},
		{"type": "interpolation_punctuation", "start": 1227, "end": 1229},
		{"type": "operator", "start": 1232, "end": 1233},
		{"type": "interpolation_punctuation", "start": 1236, "end": 1237},
		{"type": "string", "start": 1237, "end": 1240},
		{"type": "template_punctuation", "start": 1240, "end": 1241},
		{"type": "punctuation", "start": 1241, "end": 1242},
		{"type": "punctuation", "start": 1242, "end": 1243},
		{"type": "punctuation", "start": 1245, "end": 1246},
		{"type": "operator", "start": 1249, "end": 1250},
		{"type": "function", "start": 1250, "end": 1259},
		{"type": "punctuation", "start": 1259, "end": 1260},
		{"type": "punctuation", "start": 1260, "end": 1261},
		{"type": "punctuation", "start": 1262, "end": 1263},
		{"type": "special_keyword", "start": 1266, "end": 1271},
		{"type": "number", "start": 1272, "end": 1273},
		{"type": "punctuation", "start": 1273, "end": 1274},
		{"type": "special_keyword", "start": 1277, "end": 1282},
		{"type": "operator", "start": 1282, "end": 1283},
		{"type": "punctuation", "start": 1284, "end": 1285},
		{"type": "number", "start": 1285, "end": 1286},
		{"type": "punctuation", "start": 1286, "end": 1287},
		{"type": "number", "start": 1288, "end": 1289},
		{"type": "punctuation", "start": 1289, "end": 1290},
		{"type": "punctuation", "start": 1290, "end": 1291},
		{"type": "punctuation", "start": 1293, "end": 1294},
		{"type": "operator", "start": 1303, "end": 1304},
		{"type": "function", "start": 1304, "end": 1319},
		{"type": "punctuation", "start": 1319, "end": 1320},
		{"type": "punctuation", "start": 1320, "end": 1321},
		{"type": "punctuation", "start": 1322, "end": 1323},
		{"type": "special_keyword", "start": 1326, "end": 1331},
		{"type": "special_keyword", "start": 1332, "end": 1337},
		{"type": "builtin", "start": 1338, "end": 1345},
		{"type": "punctuation", "start": 1345, "end": 1346},
		{"type": "function", "start": 1346, "end": 1353},
		{"type": "punctuation", "start": 1353, "end": 1354},
		{"type": "number", "start": 1354, "end": 1355},
		{"type": "punctuation", "start": 1355, "end": 1356},
		{"type": "punctuation", "start": 1356, "end": 1357},
		{"type": "punctuation", "start": 1359, "end": 1360},
		{"type": "keyword", "start": 1363, "end": 1372},
		{"type": "keyword", "start": 1373, "end": 1378},
		{"type": "function", "start": 1379, "end": 1395},
		{"type": "punctuation", "start": 1395, "end": 1396},
		{"type": "punctuation", "start": 1396, "end": 1397},
		{"type": "operator", "start": 1397, "end": 1398},
		{"type": "builtin", "start": 1399, "end": 1406},
		{"type": "operator", "start": 1406, "end": 1407},
		{"type": "keyword", "start": 1407, "end": 1411},
		{"type": "operator", "start": 1411, "end": 1412},
		{"type": "punctuation", "start": 1413, "end": 1414},
		{"type": "special_keyword", "start": 1417, "end": 1420},
		{"type": "punctuation", "start": 1421, "end": 1422},
		{"type": "special_keyword", "start": 1426, "end": 1431},
		{"type": "keyword", "start": 1432, "end": 1435},
		{"type": "class_name", "start": 1436, "end": 1443},
		{"type": "builtin", "start": 1436, "end": 1443},
		{"type": "punctuation", "start": 1443, "end": 1444},
		{"type": "punctuation", "start": 1444, "end": 1445},
		{"type": "punctuation", "start": 1452, "end": 1453},
		{"type": "operator", "start": 1454, "end": 1456},
		{"type": "function", "start": 1457, "end": 1467},
		{"type": "punctuation", "start": 1467, "end": 1468},
		{"type": "punctuation", "start": 1475, "end": 1476},
		{"type": "number", "start": 1477, "end": 1480},
		{"type": "punctuation", "start": 1480, "end": 1481},
		{"type": "punctuation", "start": 1481, "end": 1482},
		{"type": "punctuation", "start": 1482, "end": 1483},
		{"type": "special_keyword", "start": 1487, "end": 1489},
		{"type": "punctuation", "start": 1490, "end": 1491},
		{"type": "punctuation", "start": 1495, "end": 1496},
		{"type": "function", "start": 1496, "end": 1502},
		{"type": "punctuation", "start": 1502, "end": 1503},
		{"type": "punctuation", "start": 1503, "end": 1504},
		{"type": "operator", "start": 1505, "end": 1506},
		{"type": "number", "start": 1507, "end": 1510},
		{"type": "punctuation", "start": 1510, "end": 1511},
		{"type": "punctuation", "start": 1512, "end": 1513},
		{"type": "builtin", "start": 1518, "end": 1525},
		{"type": "punctuation", "start": 1525, "end": 1526},
		{"type": "function", "start": 1526, "end": 1529},
		{"type": "punctuation", "start": 1529, "end": 1530},
		{"type": "keyword", "start": 1530, "end": 1533},
		{"type": "class_name", "start": 1534, "end": 1538},
		{"type": "type_name", "start": 1534, "end": 1538},
		{"type": "punctuation", "start": 1538, "end": 1539},
		{"type": "punctuation", "start": 1539, "end": 1540},
		{"type": "punctuation", "start": 1540, "end": 1541},
		{"type": "punctuation", "start": 1541, "end": 1542},
		{"type": "comment", "start": 1543, "end": 1576},
		{"type": "punctuation", "start": 1580, "end": 1581},
		{"type": "special_keyword", "start": 1582, "end": 1586},
		{"type": "special_keyword", "start": 1587, "end": 1589},
		{"type": "punctuation", "start": 1590, "end": 1591},
		{"type": "punctuation", "start": 1595, "end": 1596},
		{"type": "function", "start": 1596, "end": 1602},
		{"type": "punctuation", "start": 1602, "end": 1603},
		{"type": "punctuation", "start": 1603, "end": 1604},
		{"type": "operator", "start": 1605, "end": 1606},
		{"type": "number", "start": 1607, "end": 1610},
		{"type": "punctuation", "start": 1610, "end": 1611},
		{"type": "punctuation", "start": 1612, "end": 1613},
		{"type": "builtin", "start": 1618, "end": 1625},
		{"type": "punctuation", "start": 1625, "end": 1626},
		{"type": "function", "start": 1626, "end": 1629},
		{"type": "punctuation", "start": 1629, "end": 1630},
		{"type": "string", "start": 1630, "end": 1646},
		{"type": "punctuation", "start": 1646, "end": 1647},
		{"type": "punctuation", "start": 1647, "end": 1648},
		{"type": "punctuation", "start": 1652, "end": 1653},
		{"type": "special_keyword", "start": 1654, "end": 1658},
		{"type": "punctuation", "start": 1659, "end": 1660},
		{"type": "builtin", "start": 1665, "end": 1672},
		{"type": "punctuation", "start": 1672, "end": 1673},
		{"type": "function", "start": 1673, "end": 1676},
		{"type": "punctuation", "start": 1676, "end": 1677},
		{"type": "string", "start": 1677, "end": 1690},
		{"type": "punctuation", "start": 1690, "end": 1691},
		{"type": "punctuation", "start": 1691, "end": 1692},
		{"type": "punctuation", "start": 1696, "end": 1697},
		{"type": "punctuation", "start": 1700, "end": 1701},
		{"type": "special_keyword", "start": 1702, "end": 1707},
		{"type": "punctuation", "start": 1708, "end": 1709},
		{"type": "operator", "start": 1714, "end": 1715},
		{"type": "builtin", "start": 1716, "end": 1723},
		{"type": "punctuation", "start": 1723, "end": 1724},
		{"type": "punctuation", "start": 1725, "end": 1726},
		{"type": "builtin", "start": 1730, "end": 1737},
		{"type": "punctuation", "start": 1737, "end": 1738},
		{"type": "function", "start": 1738, "end": 1743},
		{"type": "punctuation", "start": 1743, "end": 1744},
		{"type": "punctuation", "start": 1749, "end": 1750},
		{"type": "punctuation", "start": 1750, "end": 1751},
		{"type": "punctuation", "start": 1754, "end": 1755},
		{"type": "special_keyword", "start": 1756, "end": 1763},
		{"type": "punctuation", "start": 1764, "end": 1765},
		{"type": "builtin", "start": 1769, "end": 1776},
		{"type": "punctuation", "start": 1776, "end": 1777},
		{"type": "function", "start": 1777, "end": 1780},
		{"type": "punctuation", "start": 1780, "end": 1781},
		{"type": "string", "start": 1781, "end": 1796},
		{"type": "punctuation", "start": 1796, "end": 1797},
		{"type": "punctuation", "start": 1797, "end": 1798},
		{"type": "punctuation", "start": 1801, "end": 1802},
		{"type": "punctuation", "start": 1804, "end": 1805},
		{"type": "punctuation", "start": 1806, "end": 1807},
		{"type": "comment", "start": 1809, "end": 1819},
		{"type": "comment", "start": 1821, "end": 1864},
		{"type": "comment", "start": 1866, "end": 1890},
		{"type": "special_keyword", "start": 1892, "end": 1898},
		{"type": "punctuation", "start": 1899, "end": 1900},
		{"type": "punctuation", "start": 1912, "end": 1913},
		{"type": "keyword", "start": 1914, "end": 1918},
		{"type": "class_name", "start": 1919, "end": 1930},
		{"type": "type_name", "start": 1919, "end": 1930},
		{"type": "punctuation", "start": 1930, "end": 1931},
		{"type": "special_keyword", "start": 1932, "end": 1936},
		{"type": "string", "start": 1937, "end": 1956},
		{"type": "punctuation", "start": 1956, "end": 1957},
		{"type": "special_keyword", "start": 1958, "end": 1964},
		{"type": "operator", "start": 1965, "end": 1966},
		{"type": "special_keyword", "start": 1967, "end": 1969},
		{"type": "constant", "start": 1970, "end": 1971},
		{"type": "special_keyword", "start": 1972, "end": 1976},
		{"type": "string", "start": 1977, "end": 1996},
		{"type": "punctuation", "start": 1996, "end": 1997},
		{"type": "special_keyword", "start": 1999, "end": 2005},
		{"type": "punctuation", "start": 2006, "end": 2007},
		{"type": "punctuation", "start": 2008, "end": 2009},
		{"type": "constant", "start": 2010, "end": 2011},
		{"type": "punctuation", "start": 2011, "end": 2012},
		{"type": "punctuation", "start": 2014, "end": 2015},
		{"type": "punctuation", "start": 2017, "end": 2018},
		{"type": "constant", "start": 2019, "end": 2020},
		{"type": "punctuation", "start": 2020, "end": 2021},
		{"type": "punctuation", "start": 2021, "end": 2022},
		{"type": "special_keyword", "start": 2037, "end": 2039},
		{"type": "builtin", "start": 2040, "end": 2047},
		{"type": "special_keyword", "start": 2048, "end": 2050},
		{"type": "builtin", "start": 2051, "end": 2054},
		{"type": "special_keyword", "start": 2055, "end": 2057},
		{"type": "keyword", "start": 2070, "end": 2079},
		{"type": "punctuation", "start": 2091, "end": 2092},
		{"type": "special_keyword", "start": 2094, "end": 2100},
		{"type": "keyword", "start": 2101, "end": 2110},
		{"type": "class_name", "start": 2111, "end": 2132},
		{"type": "type_name", "start": 2111, "end": 2117},
		{"type": "operator", "start": 2117, "end": 2118},
		{"type": "constant", "start": 2118, "end": 2119},
		{"type": "operator", "start": 2120, "end": 2121},
		{"type": "keyword", "start": 2122, "end": 2131},
		{"type": "operator", "start": 2131, "end": 2132},
		{"type": "punctuation", "start": 2133, "end": 2134},
		{"type": "operator", "start": 2140, "end": 2141},
		{"type": "builtin", "start": 2142, "end": 2148},
		{"type": "punctuation", "start": 2148, "end": 2149},
		{"type": "operator", "start": 2154, "end": 2155},
		{"type": "builtin", "start": 2156, "end": 2162},
		{"type": "punctuation", "start": 2162, "end": 2163},
		{"type": "operator", "start": 2166, "end": 2167},
		{"type": "operator", "start": 2167, "end": 2168},
		{"type": "constant", "start": 2169, "end": 2170},
		{"type": "punctuation", "start": 2170, "end": 2171},
		{"type": "punctuation", "start": 2172, "end": 2173},
		{"type": "keyword", "start": 2175, "end": 2180},
		{"type": "operator", "start": 2182, "end": 2183},
		{"type": "punctuation", "start": 2184, "end": 2185},
		{"type": "operator", "start": 2189, "end": 2190},
		{"type": "builtin", "start": 2191, "end": 2197},
		{"type": "punctuation", "start": 2197, "end": 2198},
		{"type": "operator", "start": 2202, "end": 2203},
		{"type": "builtin", "start": 2204, "end": 2210},
		{"type": "punctuation", "start": 2210, "end": 2211},
		{"type": "operator", "start": 2212, "end": 2213},
		{"type": "punctuation", "start": 2214, "end": 2215},
		{"type": "operator", "start": 2219, "end": 2220},
		{"type": "string", "start": 2221, "end": 2228},
		{"type": "punctuation", "start": 2228, "end": 2229},
		{"type": "operator", "start": 2233, "end": 2234},
		{"type": "number", "start": 2235, "end": 2238},
		{"type": "punctuation", "start": 2238, "end": 2239},
		{"type": "punctuation", "start": 2239, "end": 2240},
		{"type": "keyword", "start": 2241, "end": 2246},
		{"type": "operator", "start": 2249, "end": 2250},
		{"type": "punctuation", "start": 2251, "end": 2252},
		{"type": "punctuation", "start": 2252, "end": 2253},
		{"type": "string", "start": 2253, "end": 2255},
		{"type": "punctuation", "start": 2255, "end": 2256},
		{"type": "punctuation", "start": 2258, "end": 2259},
		{"type": "punctuation", "start": 2259, "end": 2260},
		{"type": "special_keyword", "start": 2261, "end": 2263},
		{"type": "keyword", "start": 2264, "end": 2269},
		{"type": "punctuation", "start": 2269, "end": 2270},
		{"type": "special_keyword", "start": 2271, "end": 2277},
		{"type": "keyword", "start": 2278, "end": 2283},
		{"type": "type_annotation", "start": 2290, "end": 2312},
		{"type": ":", "start": 2290, "end": 2291},
		{"type": "type", "start": 2291, "end": 2312},
		{"type": "type_name", "start": 2292, "end": 2295},
		{"type": "operator", "start": 2295, "end": 2296},
		{"type": "builtin", "start": 2296, "end": 2302},
		{"type": "punctuation", "start": 2302, "end": 2303},
		{"type": "type_name", "start": 2304, "end": 2310},
		{"type": "operator", "start": 2310, "end": 2311},
		{"type": "operator", "start": 2312, "end": 2313},
		{"type": "keyword", "start": 2314, "end": 2317},
		{"type": "class_name", "start": 2318, "end": 2321},
		{"type": "type_name", "start": 2318, "end": 2321},
		{"type": "punctuation", "start": 2321, "end": 2322},
		{"type": "punctuation", "start": 2323, "end": 2324},
		{"type": "punctuation", "start": 2324, "end": 2325},
		{"type": "special_keyword", "start": 2327, "end": 2333},
		{"type": "keyword", "start": 2334, "end": 2342},
		{"type": "function", "start": 2343, "end": 2346},
		{"type": "punctuation", "start": 2346, "end": 2347},
		{"type": "operator", "start": 2348, "end": 2349},
		{"type": "builtin", "start": 2350, "end": 2356},
		{"type": "punctuation", "start": 2356, "end": 2357},
		{"type": "operator", "start": 2359, "end": 2360},
		{"type": "builtin", "start": 2361, "end": 2367},
		{"type": "punctuation", "start": 2367, "end": 2368},
		{"type": "operator", "start": 2368, "end": 2369},
		{"type": "builtin", "start": 2370, "end": 2376},
		{"type": "punctuation", "start": 2377, "end": 2378},
		{"type": "special_keyword", "start": 2380, "end": 2386},
		{"type": "operator", "start": 2389, "end": 2390},
		{"type": "punctuation", "start": 2392, "end": 2393},
		{"type": "punctuation", "start": 2394, "end": 2395},
		{"type": "special_keyword", "start": 2397, "end": 2403},
		{"type": "keyword", "start": 2404, "end": 2409},
		{"type": "function_variable", "start": 2410, "end": 2414},
		{"type": "operator", "start": 2415, "end": 2416},
		{"type": "punctuation", "start": 2417, "end": 2418},
		{"type": "operator", "start": 2419, "end": 2420},
		{"type": "builtin", "start": 2421, "end": 2424},
		{"type": "punctuation", "start": 2424, "end": 2425},
		{"type": "operator", "start": 2427, "end": 2428},
		{"type": "builtin", "start": 2429, "end": 2432},
		{"type": "punctuation", "start": 2432, "end": 2433},
		{"type": "type_annotation", "start": 2433, "end": 2439},
		{"type": ":", "start": 2433, "end": 2434},
		{"type": "type", "start": 2434, "end": 2439},
		{"type": "builtin", "start": 2435, "end": 2438},
		{"type": "operator", "start": 2439, "end": 2441},
		{"type": "operator", "start": 2444, "end": 2445},
		{"type": "punctuation", "start": 2447, "end": 2448},
		{"type": "comment", "start": 2450, "end": 2472},
		{"type": "special_keyword", "start": 2473, "end": 2479},
		{"type": "keyword", "start": 2480, "end": 2485},
		{"type": "operator", "start": 2504, "end": 2505},
		{"type": "string", "start": 2506, "end": 2535},
		{"type": "punctuation", "start": 2535, "end": 2536},
		{"type": "special_keyword", "start": 2537, "end": 2543},
		{"type": "keyword", "start": 2544, "end": 2549},
		{"type": "operator", "start": 2567, "end": 2568},
		{"type": "string", "start": 2569, "end": 2595},
		{"type": "punctuation", "start": 2595, "end": 2596},
		{"type": "special_keyword", "start": 2597, "end": 2603},
		{"type": "keyword", "start": 2604, "end": 2609},
		{"type": "operator", "start": 2629, "end": 2630},
		{"type": "template_string", "start": 2631, "end": 2648},
		{"type": "template_punctuation", "start": 2631, "end": 2632},
		{"type": "string", "start": 2632, "end": 2639},
		{"type": "interpolation", "start": 2639, "end": 2647},
		{"type": "interpolation_punctuation", "start": 2639, "end": 2641},
		{"type": "number", "start": 2641, "end": 2642},
		{"type": "operator", "start": 2643, "end": 2644},
		{"type": "number", "start": 2645, "end": 2646},
		{"type": "interpolation_punctuation", "start": 2646, "end": 2647},
		{"type": "template_punctuation", "start": 2647, "end": 2648},
		{"type": "punctuation", "start": 2648, "end": 2649},
		{"type": "comment", "start": 2651, "end": 2683},
		{"type": "special_keyword", "start": 2684, "end": 2690},
		{"type": "keyword", "start": 2691, "end": 2696},
		{"type": "operator", "start": 2703, "end": 2704},
		{"type": "regex", "start": 2705, "end": 2714},
		{"type": "regex_delimiter", "start": 2705, "end": 2706},
		{"type": "regex_source", "start": 2706, "end": 2712},
		{"type": "regex_delimiter", "start": 2712, "end": 2713},
		{"type": "regex_flags", "start": 2713, "end": 2714},
		{"type": "punctuation", "start": 2714, "end": 2715},
		{"type": "special_keyword", "start": 2716, "end": 2722},
		{"type": "keyword", "start": 2723, "end": 2728},
		{"type": "operator", "start": 2743, "end": 2744},
		{"type": "regex", "start": 2745, "end": 2777},
		{"type": "regex_delimiter", "start": 2745, "end": 2746},
		{"type": "regex_source", "start": 2746, "end": 2776},
		{"type": "regex_delimiter", "start": 2776, "end": 2777},
		{"type": "punctuation", "start": 2777, "end": 2778},
		{"type": "comment", "start": 2780, "end": 2836},
		{"type": "comment", "start": 2837, "end": 2888}
	],
	"html": "<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> b<span class=\"token type_annotation\"><span class=\"token :\">:</span><span class=\"token type\"> <span class=\"token builtin\">string</span> </span></span><span class=\"token operator\">=</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class_name\"><span class=\"token type_name class_name\">Some_Type</span></span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">const</span> class_decorator<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> property_decorator<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> method_decorator<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class_name\"><span class=\"token type_name class_name\">Base</span></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">abstract</span> <span class=\"token function\">abstract_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function decorator_name\">class_decorator</span></span>\n<span class=\"token keyword\">class</span> <span class=\"token class_name\"><span class=\"token constant\">D</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class_name\"><span class=\"token type_name class_name\">Base</span></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">readonly</span> d1<span class=\"token type_annotation\"><span class=\"token :\">:</span><span class=\"token type\"> <span class=\"token builtin\">string</span> </span></span><span class=\"token operator\">=</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">;</span>\n\td2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\td3 <span class=\"token operator\">=</span> <span class=\"token function\">$state</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function decorator_name\">property_decorator</span></span>\n\tdecorated <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>d2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d2 <span class=\"token operator\">=</span> d2<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">abstract_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// implementation</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function decorator_name\">method_decorator</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'example'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>option<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">class_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token special_keyword\">return</span> <span class=\"token template_string\"><span class=\"token template_punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d1<span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token template_punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function_variable function\">instance_method</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token type_annotation\"><span class=\"token :\">:</span><span class=\"token type\"> <span class=\"token keyword\">void</span> </span></span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">/* ... */</span>\n\t\t<span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token special_keyword\">do</span> <span class=\"token punctuation\">{</span>\n\t\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token special_keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token special_keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> c2 <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token special_keyword\">if</span> <span class=\"token punctuation\">(</span>c2 <span class=\"token operator\">===</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">)</span> <span class=\"token special_keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token special_keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>c2<span class=\"token punctuation\">)</span> <span class=\"token special_keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">#private_method</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token special_keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token special_keyword\">case</span> <span class=\"token string\">'a'</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'case a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token special_keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token special_keyword\">case</span> <span class=\"token string\">'b'</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token special_keyword\">case</span> <span class=\"token string\">'c'</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'case b or c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token special_keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token special_keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'default'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">const</span> obj<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>has_d1<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span> is_d<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t\thas_d1<span class=\"token operator\">:</span> <span class=\"token string\">'d1'</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n\t\t\tis_d<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class_name\"><span class=\"token constant\">D</span></span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>has_d1<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// foo</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">#private_method</span><span class=\"token punctuation\">(</span>a2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> c2<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token special_keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class_name\"><span class=\"token type_name class_name\">Error</span></span><span class=\"token punctuation\">(</span><span class=\"token template_string\"><span class=\"token template_punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d1<span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token string\">\n\t\t\tmultiline\n\t\t\tetc </span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span>a2 <span class=\"token operator\">+</span> c2<span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token string\">\n\t\t</span><span class=\"token template_punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token operator\">*</span><span class=\"token function\">generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token special_keyword\">yield</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token special_keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tasync <span class=\"token operator\">*</span><span class=\"token function\">async_generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token special_keyword\">yield</span> <span class=\"token special_keyword\">await</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">async</span> <span class=\"token function\">protected_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token special_keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token special_keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class_name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token special_keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class_name\"><span class=\"token type_name class_name\">Date</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// eslint-disable-line no-console</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token special_keyword\">else</span> <span class=\"token special_keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'else if branch'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token special_keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'else branch'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token special_keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token special_keyword\">finally</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'finally block'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// comment</span>\n\n<span class=\"token comment\">/*\nother comment\n\nconst comment = false;\n*/</span>\n\n<span class=\"token comment\">/**\n * JSDoc comment\n */</span>\n\n<span class=\"token special_keyword\">import</span> <span class=\"token punctuation\">{</span>sample_langs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">type</span> <span class=\"token class_name\"><span class=\"token type_name class_name\">Sample_Lang</span></span><span class=\"token punctuation\">}</span> <span class=\"token special_keyword\">from</span> <span class=\"token string\">'../code_sample.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token special_keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token special_keyword\">as</span> <span class=\"token constant\">A</span> <span class=\"token special_keyword\">from</span> <span class=\"token string\">'../code_sample.js'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token special_keyword\">export</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nsample_langs <span class=\"token special_keyword\">as</span> <span class=\"token builtin\">unknown</span> <span class=\"token special_keyword\">as</span> <span class=\"token builtin\">any</span> <span class=\"token special_keyword\">as</span> Sample_Lang <span class=\"token keyword\">satisfies</span> Sample_Lang<span class=\"token punctuation\">;</span>\n\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class_name\"><span class=\"token type_name class_name\">Some_E</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\tage<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\tt<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> e<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'A. H.'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token special_keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">const</span> some_e<span class=\"token type_annotation\"><span class=\"token :\">:</span><span class=\"token type\"> <span class=\"token type_name class_name\">Map</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token type_name class_name\">Some_E</span><span class=\"token operator\">></span> </span></span><span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class_name\"><span class=\"token type_name class_name\">Map</span></span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token special_keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function_variable function\">plus</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token type_annotation\"><span class=\"token :\">:</span><span class=\"token type\"> <span class=\"token builtin\">any</span> </span></span><span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// boundary test cases</span>\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">const</span> str_with_keywords <span class=\"token operator\">=</span> <span class=\"token string\">'const class function string'</span><span class=\"token punctuation\">;</span>\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">const</span> str_with_comment <span class=\"token operator\">=</span> <span class=\"token string\">'// this is not a comment'</span><span class=\"token punctuation\">;</span>\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">const</span> template_with_expr <span class=\"token operator\">=</span> <span class=\"token template_string\"><span class=\"token template_punctuation string\">`</span><span class=\"token string\">Value: </span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token template_punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// regex that looks like comment</span>\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">const</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex_delimiter\">/</span><span class=\"token regex_source lang_regex\">\\/\\/.*</span><span class=\"token regex_delimiter\">/</span><span class=\"token regex_flags\">g</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token special_keyword\">export</span> <span class=\"token keyword\">const</span> complex_regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex_delimiter\">/</span><span class=\"token regex_source lang_regex\">^(?:\\/\\*.*?\\*\\/|\\/\\/.*|[^/])+$</span><span class=\"token regex_delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// string in comment should not be highlighted as string</span>\n<span class=\"token comment\">// const commented = \"this string is in a comment\";</span>\n"
}
