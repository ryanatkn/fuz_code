// generated by src/lib/samples/all.gen.ts - DO NOT EDIT OR RISK LOST DATA

import type {Code_Sample} from '$lib/code_sample.js';
import {sample_langs} from '$lib/code_sample.js';

export type Sample_Key =
	| 'json_complex'
	| 'css_complex'
	| 'ts_complex'
	| 'html_complex'
	| 'svelte_complex';

export const samples: Record<Sample_Key, Code_Sample> = {
	json_complex: {
		name: 'json_complex',
		lang: 'json',
		content: `{
	"string": "a string",
	"number": 12345,
	"boolean": true,
	"null": null,
	"empty": "",
	"escaped": "quote: \\"test\\" and backslash: \\\\",
	"object": {
		"array": [1, "b", false],
		"strings": ["first", "second", "third"],
		"mixed": [
			"string at start",
			123,
			true,
			"string in middle",
			null,
			"string at end"
		],
		"nested": [
			["nested", "array", "strings"],
			{"key": "value in nested object"}
		]
	}
}
`,
	},
	css_complex: {
		name: 'css_complex',
		lang: 'css',
		content: `.some_class {
	color: red;
}

.hypen-class {
	font-size: 16px;
}

p {
	box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

/* comment */

/*
multi
line

<comment>

*/

#unique_id {
	background-color: blue;
}

div > p {
	margin: 10px;
}

@media (max-width: 600px) {
	body {
		background-color: lightblue;
	}
}
`,
	},
	ts_complex: {
		name: 'ts_complex',
		lang: 'ts',
		content: `const a = 1;

const b = 'b';

const c = true;

export type Some_Type = 1 | 'b' | true;

class D {
	d1: string = 'd';
	d2: number;
	d3 = $state(false);

	constructor(d2: number) {
		this.d2 = d2;
	}

	class_method(): string {
		return \`Hello, \${this.d1}\`;
	}

	instance_method = (): void => {
		/* ... */
		this.#private_method();
		// foo
	};

	#private_method() {
		throw new Error(\`\${this.d1} etc\`);
	}

	protected protected_method(): void {
		console.log(new Date()); // eslint-disable-line no-console
	}
}

export {a, b, c, D};

// comment

/*
other comment

const comment = false;
*/

/**
 * JSDoc comment
 */

export interface Some_E {
	name: string;
	age: number;
}

export const some_e: Some_E = {name: 'A. H.', age: 100};

export function add(x: number, y: number): number {
	return x + y;
}

export const plus = (a: any, b: any): any => a + b;
`,
	},
	html_complex: {
		name: 'html_complex',
		lang: 'html',
		content: `<!doctype html>

<div class="test">
	<p>hello world!</p>
</div>

<p class="some_class hypen-class">some <span class="a b c">text</span></p>

<button type="button" disabled>click me</button>

<!-- comment <div>a<br /> b</div> -->

<br />

<hr />

<img src="image.jpg" alt="access" />

<ul>
	<li>list item 1</li>
	<li>list item 2</li>
</ul>

<script type="text/javascript">
	const ok = 'yes';
</script>

<style type="text/css">
	.special::before {
		content: '< & >';
	}
</style>

<![CDATA[ if (a < 0) alert("b"); <not-a-tag> ]]>
`,
	},
	svelte_complex: {
		name: 'svelte_complex',
		lang: 'svelte',
		content: `<script lang="ts" module>
	export const HELLO = 'world';
</script>

<script lang="ts">
	// @ts-expect-error
	import Thing from '$lib/Thing.svelte';
	import type {Snippet} from 'svelte';

	const {
		thing,
		bound = $bindable(true),
		children,
	}: {
		thing: Record<string, any>;
		bound?: boolean;
		children: Snippet;
	} = $props();

	const thing_keys = $derived(Object.keys(thing));

	const a = 1;

	const b = 'b';

	let c: boolean = $state(true);

	export type Some_Type = 1 | 'b' | true;

	class D {
		d1: string = 'd';
		d2: number;
		d3 = $state(false);

		constructor(d2: number) {
			this.d2 = d2;
		}

		class_method(): string {
			return \`Hello, \${this.d1}\`;
		}

		instance_method = () => {
			/* ... */
			this.#private_method();
			// foo
		};

		#private_method() {
			throw new Error(\`\${this.d1} etc\`);
		}

		protected protected_method() {
			console.log(new Date(123)); // eslint-disable-line no-console
		}
	}

	// comment

	/*
	other comment

	const comment = false;
	*/

	/**
	 * JSDoc comment
	 */

	export interface Some_E {
		name: string;
		age: number;
	}

	export const some_e: Some_E = {name: 'A. H.', age: 100};

	export function add(x: number, y: number): number {
		return x + y;
	}

	export const plus = (a: any, b: any): any => a + b;
</script>

<h1>hello {HELLO}!</h1>

{#each thing_keys as key (key)}
	{@const value = thing[key]}
	{value}
{/each}

{#if c}
	<Thing string_prop="a" number_prop={1} />
{:else}
	<Thing string_prop="b" number_prop={2} onthing={() => (c = !c)}>
		{@render children()}
	</Thing>
{/if}

<!DOCTYPE html>

<div class="test special" id="unique_id">
	<p>hello world!</p>
</div>

<p class="some_class hypen-class">
	some <span class="a b c">text</span>
</p>

<button type="button" disabled> click me </button>

<!-- comment <div>a<br /> b</div> -->
{a}
{b}
{bound}
{D}

<br />

<hr />

<img src="image.jpg" alt="access" />

<ul>
	<li>list item 1</li>
	<li>list item 2</li>
</ul>

<style>
	.some_class {
		color: red;
	}

	.hypen-class {
		font-size: 16px;
	}

	p {
		box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
	}

	/* comment */

	/*
	multi
	line

	<comment>

	*/

	#unique_id {
		background-color: blue;
	}

	div > p {
		margin: 10px;
	}

	@media (max-width: 600px) {
		:global(body) {
			background-color: lightblue;
		}
	}

	.special::before {
		content: '< & >';
	}
</style>
`,
	},
};

export {sample_langs};

// generated by src/lib/samples/all.gen.ts - DO NOT EDIT OR RISK LOST DATA
