import type {Gen} from '@ryanatkn/gro';
import {readFileSync} from 'node:fs';
import {search_fs} from '@ryanatkn/gro/search_fs.js';
import {basename} from 'node:path';

export const gen: Gen = ({origin_path}) => {
	// Discover all sample files dynamically
	const sample_files = search_fs('src/lib/samples', {
		file_filter: (path) => /sample_[^/]+\.(ts|css|html|json|svelte)$/.test(path),
	});

	// Group samples by variant
	const samples_by_variant: Record<string, Record<string, string>> = {};

	for (const file of sample_files) {
		// Parse filename: sample_complex.ts â†’ {variant: 'complex', lang: 'ts'}
		const filename = basename(file.id);
		const match = filename.match(/sample_([^.]+)\.(.+)$/);
		if (!match) continue;

		const [, variant, lang] = match;
		const content = readFileSync(file.id, 'utf-8');

		if (!samples_by_variant[variant]) {
			samples_by_variant[variant] = {};
		}
		samples_by_variant[variant][lang] = escape_string(content);
	}

	const banner = `// generated by ${origin_path} - DO NOT EDIT OR RISK LOST DATA`;

	// Generate exports for each variant
	const variant_exports = Object.entries(samples_by_variant)
		.map(([variant, langs]) => {
			const lang_entries = Object.entries(langs)
				.map(([lang, content]) => `${lang}: \`${content}\``)
				.join(',\n\t\t\t');

			return `export const samples_${variant} = {
			${lang_entries}
		};`;
		})
		.join('\n\n');

	return `${banner}

		${variant_exports}

		// Export all variants
		export const all_samples = {
			${Object.keys(samples_by_variant)
				.map((v) => `${v}: samples_${v}`)
				.join(',\n\t\t\t')}
		};

		${banner}
	`;
};

const escape_string = (str: string): string => {
	return str.replace(/\\/g, '\\\\').replace(/`/g, '\\`').replace(/\${/g, '\\${');
};
