import type {Gen} from '@ryanatkn/gro';
import {readFileSync} from 'node:fs';
import {search_fs} from '@ryanatkn/gro/search_fs.js';
import {basename} from 'node:path';
import {sample_langs} from '$lib/code_sample.js';

export const gen: Gen = ({origin_path}) => {
	// Discover all sample files dynamically
	const sample_files = search_fs('src/lib/samples', {
		file_filter: (path) => /sample_[^/]+\.(ts|css|html|json|svelte)$/.test(path),
	});

	// Create flat structure with lang_variant keys
	const samples: Array<{key: string; name: string; lang: string; content: string}> = [];

	for (const file of sample_files) {
		// Parse filename: sample_complex.ts â†’ {variant: 'complex', lang: 'ts'}
		const filename = basename(file.id);
		const match = /sample_([^.]+)\.(.+)$/.exec(filename);
		if (!match) continue;

		const [, variant, lang] = match;
		const content = readFileSync(file.id, 'utf-8');

		samples.push({
			key: `${lang}_${variant}`,
			name: `${lang}_${variant}`,
			lang,
			content: escape_string(content),
		});
	}

	// Sort using sample_langs order (simple to complex)
	samples.sort((a, b) => {
		const a_lang_index = sample_langs.indexOf(a.lang as any);
		const b_lang_index = sample_langs.indexOf(b.lang as any);
		if (a_lang_index !== b_lang_index) {
			return a_lang_index - b_lang_index;
		}
		// If same language, sort by variant name
		return a.key.localeCompare(b.key);
	});

	const banner = `// generated by ${origin_path} - DO NOT EDIT OR RISK LOST DATA`;

	// Generate the single export object with all samples
	const sample_entries = samples
		.map(({key, name, lang, content}) => {
			return `\t${key}: {
		name: '${name}',
		lang: '${lang}',
		content: \`${content}\`,
	}`;
		})
		.join(',\n');

	// Also generate a type for the samples object
	const type_keys = samples.map((s) => `'${s.key}'`).join(' | ');

	return `${banner}

		import type {Code_Sample} from '$lib/code_sample.js';
		import {sample_langs} from '$lib/code_sample.js';

		export type Sample_Key = ${type_keys};

		export const samples: Record<Sample_Key, Code_Sample> = {
		${sample_entries},
		};

		export {sample_langs};

		${banner}
	`;
};

const escape_string = (str: string): string => {
	return str.replace(/\\/g, '\\\\').replace(/`/g, '\\`').replace(/\${/g, '\\${');
};
