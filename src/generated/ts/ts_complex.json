{
	"sample": {
		"lang": "ts",
		"variant": "complex",
		"content": "const a = 1;\n\nconst b = 'b';\n\nconst c = true;\n\nexport type Some_Type = 1 | 'b' | true;\n\nclass D {\n\td1: string = 'd';\n\td2: number;\n\td3 = $state(false);\n\n\tconstructor(d2: number) {\n\t\tthis.d2 = d2;\n\t}\n\n\tclass_method(): string {\n\t\treturn `Hello, ${this.d1}`;\n\t}\n\n\tinstance_method = (): void => {\n\t\t/* ... */\n\t\tthis.#private_method();\n\t\t// foo\n\t};\n\n\t#private_method() {\n\t\tthrow new Error(`${this.d1} etc`);\n\t}\n\n\tprotected protected_method(): void {\n\t\tconsole.log(new Date()); // eslint-disable-line no-console\n\t}\n}\n\nexport {a, b, c, D};\n\n// comment\n\n/*\nother comment\n\nconst comment = false;\n*/\n\n/**\n * JSDoc comment\n */\n\nexport interface Some_E {\n\tname: string;\n\tage: number;\n}\n\nexport const some_e: Some_E = {name: 'A. H.', age: 100};\n\nexport function add(x: number, y: number): number {\n\treturn x + y;\n}\n\nexport const plus = (a: any, b: any): any => a + b;\n",
		"filepath": "src/lib/samples/sample_complex.ts"
	},
	"boundaries": [{"type": "content", "start": 0, "end": 854}],
	"matches": {
		"total": 229,
		"by_type": {
			"keyword": 28,
			"operator": 57,
			"number": 3,
			"punctuation": 87,
			"string": 6,
			"boolean": 4,
			"class_name": 11,
			"type": 14,
			"function": 10,
			"template_expression": 2,
			"comment": 6,
			"regex": 1
		},
		"samples": [
			{"pattern_name": "keyword", "text": "const", "start": 0, "end": 5, "priority": 50},
			{"pattern_name": "operator", "text": "=", "start": 8, "end": 9, "priority": 20},
			{"pattern_name": "number", "text": "1", "start": 10, "end": 11, "priority": 40},
			{"pattern_name": "punctuation", "text": ";", "start": 11, "end": 12, "priority": 10},
			{"pattern_name": "keyword", "text": "const", "start": 14, "end": 19, "priority": 50},
			{"pattern_name": "operator", "text": "=", "start": 22, "end": 23, "priority": 20},
			{"pattern_name": "string", "text": "'b'", "start": 24, "end": 27, "priority": 90},
			{"pattern_name": "punctuation", "text": ";", "start": 27, "end": 28, "priority": 10},
			{"pattern_name": "keyword", "text": "const", "start": 30, "end": 35, "priority": 50},
			{"pattern_name": "operator", "text": "=", "start": 38, "end": 39, "priority": 20},
			{"pattern_name": "boolean", "text": "true", "start": 40, "end": 44, "priority": 45},
			{"pattern_name": "punctuation", "text": ";", "start": 44, "end": 45, "priority": 10},
			{"pattern_name": "class_name", "text": "Some_Type", "start": 59, "end": 68, "priority": 30},
			{"pattern_name": "number", "text": "1", "start": 71, "end": 72, "priority": 40},
			{"pattern_name": "string", "text": "'b'", "start": 75, "end": 78, "priority": 90},
			{"pattern_name": "boolean", "text": "true", "start": 81, "end": 85, "priority": 45},
			{"pattern_name": "class_name", "text": "D", "start": 94, "end": 95, "priority": 30},
			{"pattern_name": "type", "text": "string", "start": 103, "end": 109, "priority": 55},
			{"pattern_name": "string", "text": "'d'", "start": 112, "end": 115, "priority": 90},
			{"pattern_name": "type", "text": "number", "start": 122, "end": 128, "priority": 55},
			{"pattern_name": "function", "text": "state", "start": 137, "end": 142, "priority": 35},
			{"pattern_name": "boolean", "text": "false", "start": 143, "end": 148, "priority": 45},
			{"pattern_name": "function", "text": "constructor", "start": 153, "end": 164, "priority": 35},
			{"pattern_name": "type", "text": "number", "start": 169, "end": 175, "priority": 55},
			{
				"pattern_name": "function",
				"text": "class_method",
				"start": 200,
				"end": 212,
				"priority": 35
			},
			{"pattern_name": "class_name", "text": "Hello", "start": 235, "end": 240, "priority": 30},
			{
				"pattern_name": "template_expression",
				"text": "${this.d1}",
				"start": 242,
				"end": 252,
				"priority": 85
			},
			{"pattern_name": "comment", "text": "/* ... */", "start": 294, "end": 303, "priority": 100},
			{"pattern_name": "regex", "text": "/* ... */", "start": 294, "end": 303, "priority": 80},
			{"pattern_name": "comment", "text": "// foo", "start": 332, "end": 338, "priority": 100},
			{
				"pattern_name": "template_expression",
				"text": "${this.d1}",
				"start": 384,
				"end": 394,
				"priority": 85
			},
			{
				"pattern_name": "comment",
				"text": "// eslint-disable-line no-console",
				"start": 471,
				"end": 504,
				"priority": 100
			},
			{"pattern_name": "number", "text": "100", "start": 725, "end": 728, "priority": 40}
		]
	},
	"domstyler_html": "<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class_name\">Some_Type</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class_name\"><span class=\"token constant\">D</span></span> <span class=\"token punctuation\">{</span>\n\td1<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">;</span>\n\td2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\td3 <span class=\"token operator\">=</span> <span class=\"token function\">$state</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>d2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d2 <span class=\"token operator\">=</span> d2<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">class_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token template_string\"><span class=\"token template_punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d1<span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token template_punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tinstance_method <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">/* ... */</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">#private_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// foo</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">#private_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class_name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template_string\"><span class=\"token template_punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d1<span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token string\"> etc</span><span class=\"token template_punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">protected</span> <span class=\"token function\">protected_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class_name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// eslint-disable-line no-console</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// comment</span>\n\n<span class=\"token comment\">/*\nother comment\n\nconst comment = false;\n*/</span>\n\n<span class=\"token comment\">/**\n * JSDoc comment\n */</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class_name\">Some_E</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\tage<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> some_e<span class=\"token operator\">:</span> Some_E <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'A. H.'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> plus <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n",
	"rangestyler_html": "<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token string\">&#039;b&#039;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class_name\">Some_Type</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token string\">&#039;b&#039;</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class_name\">D</span> <span class=\"token punctuation\">{</span>\n\td1<span class=\"token operator\">:</span> <span class=\"token type\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">&#039;d&#039;</span><span class=\"token punctuation\">;</span>\n\td2<span class=\"token operator\">:</span> <span class=\"token type\">number</span><span class=\"token punctuation\">;</span>\n\td3 <span class=\"token operator\">=</span> $<span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>d2<span class=\"token operator\">:</span> <span class=\"token type\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d2 <span class=\"token operator\">=</span> d2<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">class_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token type\">string</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">`Hello, ${this.d1}`</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tinstance_method <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token type\">void</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">/* ... */</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#<span class=\"token function\">private_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// foo</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t#<span class=\"token function\">private_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">`${this.d1} etc`</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">protected</span> <span class=\"token function\">protected_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token type\">void</span> <span class=\"token punctuation\">{</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// eslint-disable-line no-console</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> <span class=\"token class_name\">D</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// comment</span>\n\n<span class=\"token comment\">/*\nother comment\n\nconst comment = false;\n*/</span>\n\n<span class=\"token comment\">/**\n * JSDoc comment\n */</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class_name\">Some_E</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token type\">string</span><span class=\"token punctuation\">;</span>\n\tage<span class=\"token operator\">:</span> <span class=\"token type\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> some_e<span class=\"token operator\">:</span> <span class=\"token class_name\">Some_E</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">&#039;A. H.&#039;</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token type\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token type\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token type\">number</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> plus <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token type\">any</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token type\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token type\">any</span> <span class=\"token operator\">=&gt;</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n"
}
