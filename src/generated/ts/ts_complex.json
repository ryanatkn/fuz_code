{
	"sample": {
		"lang": "ts",
		"variant": "complex",
		"content": "const a = 1;\n\nconst b = 'b';\n\nconst c = true;\n\nexport type Some_Type = 1 | 'b' | true;\n\nclass D {\n\td1: string = 'd';\n\td2: number;\n\td3 = $state(false);\n\n\tconstructor(d2: number) {\n\t\tthis.d2 = d2;\n\t}\n\n\tclass_method(): string {\n\t\treturn `Hello, ${this.d1}`;\n\t}\n\n\tinstance_method = (): void => {\n\t\t/* ... */\n\t\tthis.#private_method();\n\t\t// foo\n\t};\n\n\t#private_method() {\n\t\tthrow new Error(`${this.d1} \n\t\t\tmultiline\n\t\t\tetc\n\t\t`);\n\t}\n\n\tprotected protected_method(): void {\n\t\tconsole.log(new Date()); // eslint-disable-line no-console\n\t}\n}\n\nexport {a, b, c, D};\n\n// comment\n\n/*\nother comment\n\nconst comment = false;\n*/\n\n/**\n * JSDoc comment\n */\n\nexport interface Some_E {\n\tname: string;\n\tage: number;\n}\n\nexport const some_e: Some_E = {name: 'A. H.', age: 100};\n\nexport function add(x: number, y: number): number {\n\treturn x + y;\n}\n\nexport const plus = (a: any, b: any): any => a + b;\n\n// boundary test cases\nexport const str_with_keywords = 'const class function string';\nexport const str_with_comment = '// this is not a comment';\nexport const template_with_expr = `Value: ${1 + 2} and ${true}`;\n\n// regex that looks like comment\nexport const regex = /\\/\\/.*/g;\nexport const complex_regex = /^(?:\\/\\*.*?\\*\\/|\\/\\/.*|[^\\/])+$/;\n\n// string in comment should not be highlighted as string\n// const commented = \"this string is in a comment\";\n",
		"filepath": "src/lib/samples/sample_complex.ts"
	},
	"boundaries": [
		{"language": "ts", "type": "code", "start": 0, "end": 24},
		{"language": "ts", "type": "string", "start": 24, "end": 27},
		{"language": "ts", "type": "code", "start": 27, "end": 75},
		{"language": "ts", "type": "string", "start": 75, "end": 78},
		{"language": "ts", "type": "code", "start": 78, "end": 112},
		{"language": "ts", "type": "string", "start": 112, "end": 115},
		{"language": "ts", "type": "code", "start": 115, "end": 234},
		{"language": "ts", "type": "string", "start": 234, "end": 253},
		{"language": "ts", "type": "code", "start": 253, "end": 294},
		{"language": "ts", "type": "comment", "start": 294, "end": 303},
		{"language": "ts", "type": "code", "start": 303, "end": 332},
		{"language": "ts", "type": "comment", "start": 332, "end": 338},
		{"language": "ts", "type": "code", "start": 338, "end": 383},
		{"language": "ts", "type": "string", "start": 383, "end": 419},
		{"language": "ts", "type": "code", "start": 419, "end": 491},
		{"language": "ts", "type": "comment", "start": 491, "end": 524},
		{"language": "ts", "type": "code", "start": 524, "end": 553},
		{"language": "ts", "type": "comment", "start": 553, "end": 563},
		{"language": "ts", "type": "code", "start": 563, "end": 565},
		{"language": "ts", "type": "comment", "start": 565, "end": 608},
		{"language": "ts", "type": "code", "start": 608, "end": 610},
		{"language": "ts", "type": "comment", "start": 610, "end": 634},
		{"language": "ts", "type": "code", "start": 634, "end": 731},
		{"language": "ts", "type": "string", "start": 731, "end": 738},
		{"language": "ts", "type": "code", "start": 738, "end": 875},
		{"language": "ts", "type": "comment", "start": 875, "end": 897},
		{"language": "ts", "type": "code", "start": 897, "end": 931},
		{"language": "ts", "type": "string", "start": 931, "end": 960},
		{"language": "ts", "type": "code", "start": 960, "end": 994},
		{"language": "ts", "type": "string", "start": 994, "end": 1020},
		{"language": "ts", "type": "code", "start": 1020, "end": 1056},
		{"language": "ts", "type": "string", "start": 1056, "end": 1085},
		{"language": "ts", "type": "code", "start": 1085, "end": 1088},
		{"language": "ts", "type": "comment", "start": 1088, "end": 1120},
		{"language": "ts", "type": "code", "start": 1120, "end": 1142},
		{"language": "ts", "type": "regex", "start": 1142, "end": 1151},
		{"language": "ts", "type": "code", "start": 1151, "end": 1182},
		{"language": "ts", "type": "regex", "start": 1182, "end": 1215},
		{"language": "ts", "type": "code", "start": 1215, "end": 1218},
		{"language": "ts", "type": "comment", "start": 1218, "end": 1274},
		{"language": "ts", "type": "code", "start": 1274, "end": 1275},
		{"language": "ts", "type": "comment", "start": 1275, "end": 1326},
		{"language": "ts", "type": "code", "start": 1326, "end": 1327}
	],
	"matches": {
		"total": 210,
		"by_type": {
			"keyword": 35,
			"operator": 38,
			"number": 3,
			"punctuation": 79,
			"string": 9,
			"boolean": 3,
			"class_name": 7,
			"type": 14,
			"function": 10,
			"comment": 10,
			"regex": 2
		},
		"samples": [
			{"pattern_name": "keyword", "text": "const", "start": 0, "end": 5, "priority": 50},
			{"pattern_name": "operator", "text": "=", "start": 8, "end": 9, "priority": 20},
			{"pattern_name": "number", "text": "1", "start": 10, "end": 11, "priority": 40},
			{"pattern_name": "punctuation", "text": ";", "start": 11, "end": 12, "priority": 10},
			{"pattern_name": "keyword", "text": "const", "start": 14, "end": 19, "priority": 50},
			{"pattern_name": "operator", "text": "=", "start": 22, "end": 23, "priority": 20},
			{"pattern_name": "string", "text": "'b'", "start": 24, "end": 27, "priority": 100},
			{"pattern_name": "punctuation", "text": ";", "start": 27, "end": 28, "priority": 10},
			{"pattern_name": "keyword", "text": "const", "start": 30, "end": 35, "priority": 50},
			{"pattern_name": "operator", "text": "=", "start": 38, "end": 39, "priority": 20},
			{"pattern_name": "boolean", "text": "true", "start": 40, "end": 44, "priority": 45},
			{"pattern_name": "punctuation", "text": ";", "start": 44, "end": 45, "priority": 10},
			{"pattern_name": "class_name", "text": "Some_Type", "start": 59, "end": 68, "priority": 30},
			{"pattern_name": "number", "text": "1", "start": 71, "end": 72, "priority": 40},
			{"pattern_name": "string", "text": "'b'", "start": 75, "end": 78, "priority": 100},
			{"pattern_name": "boolean", "text": "true", "start": 81, "end": 85, "priority": 45},
			{"pattern_name": "class_name", "text": "D", "start": 94, "end": 95, "priority": 30},
			{"pattern_name": "type", "text": "string", "start": 103, "end": 109, "priority": 55},
			{"pattern_name": "string", "text": "'d'", "start": 112, "end": 115, "priority": 100},
			{"pattern_name": "type", "text": "number", "start": 122, "end": 128, "priority": 55},
			{"pattern_name": "function", "text": "state", "start": 137, "end": 142, "priority": 35},
			{"pattern_name": "boolean", "text": "false", "start": 143, "end": 148, "priority": 45},
			{"pattern_name": "function", "text": "constructor", "start": 153, "end": 164, "priority": 35},
			{"pattern_name": "type", "text": "number", "start": 169, "end": 175, "priority": 55},
			{
				"pattern_name": "function",
				"text": "class_method",
				"start": 200,
				"end": 212,
				"priority": 35
			},
			{"pattern_name": "comment", "text": "/* ... */", "start": 294, "end": 303, "priority": 100},
			{"pattern_name": "comment", "text": "// foo", "start": 332, "end": 338, "priority": 100},
			{"pattern_name": "class_name", "text": "Error", "start": 377, "end": 382, "priority": 30},
			{
				"pattern_name": "comment",
				"text": "// eslint-disable-line no-console",
				"start": 491,
				"end": 524,
				"priority": 100
			},
			{"pattern_name": "number", "text": "100", "start": 745, "end": 748, "priority": 40},
			{"pattern_name": "regex", "text": "/\\/\\/.*/g", "start": 1142, "end": 1151, "priority": 100},
			{
				"pattern_name": "regex",
				"text": "/^(?:\\/\\*.*?\\*\\/|\\/\\/.*|[^\\/])+$/",
				"start": 1182,
				"end": 1215,
				"priority": 100
			}
		]
	},
	"domstyler_html": "<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class_name\">Some_Type</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class_name\"><span class=\"token constant\">D</span></span> <span class=\"token punctuation\">{</span>\n\td1<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">;</span>\n\td2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\td3 <span class=\"token operator\">=</span> <span class=\"token function\">$state</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>d2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d2 <span class=\"token operator\">=</span> d2<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">class_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token template_string\"><span class=\"token template_punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d1<span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token template_punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tinstance_method <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">/* ... */</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">#private_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// foo</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">#private_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class_name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template_string\"><span class=\"token template_punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d1<span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token string\"> \n\t\t\tmultiline\n\t\t\tetc\n\t\t</span><span class=\"token template_punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">protected</span> <span class=\"token function\">protected_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class_name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// eslint-disable-line no-console</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// comment</span>\n\n<span class=\"token comment\">/*\nother comment\n\nconst comment = false;\n*/</span>\n\n<span class=\"token comment\">/**\n * JSDoc comment\n */</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class_name\">Some_E</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\tage<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> some_e<span class=\"token operator\">:</span> Some_E <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'A. H.'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> plus <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// boundary test cases</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> str_with_keywords <span class=\"token operator\">=</span> <span class=\"token string\">'const class function string'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> str_with_comment <span class=\"token operator\">=</span> <span class=\"token string\">'// this is not a comment'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> template_with_expr <span class=\"token operator\">=</span> <span class=\"token template_string\"><span class=\"token template_punctuation string\">`</span><span class=\"token string\">Value: </span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token string\"> and </span><span class=\"token interpolation\"><span class=\"token interpolation_punctuation punctuation\">${</span><span class=\"token boolean\">true</span><span class=\"token interpolation_punctuation punctuation\">}</span></span><span class=\"token template_punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// regex that looks like comment</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex_delimiter\">/</span><span class=\"token regex_source lang_regex\">\\/\\/.*</span><span class=\"token regex_delimiter\">/</span><span class=\"token regex_flags\">g</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> complex_regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex_delimiter\">/</span><span class=\"token regex_source lang_regex\">^(?:\\/\\*.*?\\*\\/|\\/\\/.*|[^\\/])+$</span><span class=\"token regex_delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// string in comment should not be highlighted as string</span>\n<span class=\"token comment\">// const commented = \"this string is in a comment\";</span>\n",
	"rangestyler_html": "<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token string\">&#039;b&#039;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class_name\">Some_Type</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token string\">&#039;b&#039;</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class_name\">D</span> <span class=\"token punctuation\">{</span>\n\td1<span class=\"token operator\">:</span> <span class=\"token type\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">&#039;d&#039;</span><span class=\"token punctuation\">;</span>\n\td2<span class=\"token operator\">:</span> <span class=\"token type\">number</span><span class=\"token punctuation\">;</span>\n\td3 <span class=\"token operator\">=</span> $<span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>d2<span class=\"token operator\">:</span> <span class=\"token type\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d2 <span class=\"token operator\">=</span> d2<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">class_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token type\">string</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">`Hello, ${this.d1}`</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tinstance_method <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token type\">void</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">/* ... */</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#<span class=\"token function\">private_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// foo</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t#<span class=\"token function\">private_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">`${this.d1} \n\t\t\tmultiline\n\t\t\tetc\n\t\t`</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">protected</span> <span class=\"token function\">protected_method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token type\">void</span> <span class=\"token punctuation\">{</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// eslint-disable-line no-console</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> <span class=\"token class_name\">D</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// comment</span>\n\n<span class=\"token comment\">/*\nother comment\n\nconst comment = false;\n*/</span>\n\n<span class=\"token comment\">/**\n * JSDoc comment\n */</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class_name\">Some_E</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token type\">string</span><span class=\"token punctuation\">;</span>\n\tage<span class=\"token operator\">:</span> <span class=\"token type\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> some_e<span class=\"token operator\">:</span> <span class=\"token class_name\">Some_E</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">&#039;A. H.&#039;</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token type\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token type\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token type\">number</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> plus <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token type\">any</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token type\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token type\">any</span> <span class=\"token operator\">=&gt;</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// boundary test cases</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> str_with_keywords <span class=\"token operator\">=</span> <span class=\"token string\">&#039;const class function string&#039;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> str_with_comment <span class=\"token operator\">=</span> <span class=\"token string\">&#039;// this is not a comment&#039;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> template_with_expr <span class=\"token operator\">=</span> <span class=\"token string\">`Value: ${1 + 2} and ${true}`</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// regex that looks like comment</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/\\/\\/.*/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> complex_regex <span class=\"token operator\">=</span> <span class=\"token regex\">/^(?:\\/\\*.*?\\*\\/|\\/\\/.*|[^\\/])+$/</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// string in comment should not be highlighted as string</span>\n<span class=\"token comment\">// const commented = &quot;this string is in a comment&quot;;</span>\n"
}
